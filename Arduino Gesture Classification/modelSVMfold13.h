#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[76] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.86  , -2.68  , -9.51  , 11.83  , 0.88  , -9.63  , 14.33  , -3.81  , -9.34  , 14.08  , 1.02  , -10.66 );
                        kernels[1] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[2] = compute_kernel(x,   15.57  , -4.23  , -6.47  , 15.09  , 2.55  , -6.1  , 15.71  , 1.88  , -5.76  , 16.16  , -2.44  , -7.85 );
                        kernels[3] = compute_kernel(x,   12.91  , -4.36  , -7.24  , 12.33  , 4.01  , -6.75  , 17.44  , 4.77  , -3.47  , 14.18  , -5.11  , -7.51 );
                        kernels[4] = compute_kernel(x,   12.24  , -4.72  , -7.03  , 11.97  , 2.3  , -7.52  , 16.41  , 4.2  , -5.76  , 13.34  , -4.37  , -7.94 );
                        kernels[5] = compute_kernel(x,   11.91  , -2.7  , -8.66  , 12.23  , 2.16  , -7.6  , 17.03  , 1.59  , -6.21  , 11.43  , -3.34  , -9.4 );
                        kernels[6] = compute_kernel(x,   11.61  , -4.83  , -7.3  , 10.54  , 4.7  , -7.21  , 16.94  , 4.84  , -5.32  , 13.1  , -5.89  , -7.81 );
                        kernels[7] = compute_kernel(x,   12.71  , -3.78  , -7.39  , 10.39  , 2.62  , -7.61  , 16.41  , 2.15  , -6.22  , 12.22  , -5.6  , -7.54 );
                        kernels[8] = compute_kernel(x,   12.95  , -3.15  , -6.68  , 11.6  , 3.62  , -6.36  , 16.98  , 3.33  , -4.64  , 11.78  , -5.6  , -7.15 );
                        kernels[9] = compute_kernel(x,   12.19  , -3.09  , -7.91  , 10.85  , 3.46  , -7.08  , 16.07  , 3.28  , -5.86  , 11.66  , -6.04  , -7.98 );
                        kernels[10] = compute_kernel(x,   13.12  , -5.67  , -6.88  , 9.59  , 4.04  , -7.06  , 16.44  , 4.07  , -6.63  , 13.24  , -6.34  , -6.6 );
                        kernels[11] = compute_kernel(x,   14.8  , -4.88  , -6.23  , 11.02  , 3.47  , -7.41  , 16.55  , 3.43  , -5.91  , 17.73  , -3.26  , -5.85 );
                        kernels[12] = compute_kernel(x,   13.71  , -6.86  , -3.13  , 12.61  , 5.61  , -5.3  , 18.73  , 1.64  , -3.42  , 15.91  , 0.96  , -7.18 );
                        kernels[13] = compute_kernel(x,   13.69  , -6.75  , -2.67  , 12.13  , 5.7  , -5.15  , 18.37  , 1.54  , -3.48  , 14.83  , 0.97  , -7.86 );
                        kernels[14] = compute_kernel(x,   11.09  , -7.1  , -5.78  , 10.75  , 6.87  , -7.31  , 13.08  , -0.23  , -11.13  , 16.75  , -2.3  , -7.46 );
                        kernels[15] = compute_kernel(x,   9.78  , -3.04  , -9.71  , 9.38  , 2.15  , -7.93  , 9.35  , 8.83  , 3.18  , 10.36  , -9.64  , -0.11 );
                        kernels[16] = compute_kernel(x,   6.19  , -5.91  , -6.83  , 8.21  , 1.01  , -8.35  , 8.62  , 3.64  , -8.52  , 8.51  , -8.86  , -4.18 );
                        kernels[17] = compute_kernel(x,   6.19  , -2.2  , -8.89  , 8.09  , 0.66  , -8.65  , 10.91  , 7.92  , -0.59  , 10.64  , -0.85  , -10.02 );
                        kernels[18] = compute_kernel(x,   6.86  , -2.28  , -8.88  , 8.42  , 1.33  , -8.47  , 10.46  , 7.69  , -1.6  , 11.2  , -1.18  , -10.01 );
                        kernels[19] = compute_kernel(x,   6.37  , -6.15  , -6.08  , 5.84  , -2.2  , -8.32  , 7.54  , 7.99  , -2.39  , 8.69  , -8.68  , -1.88 );
                        kernels[20] = compute_kernel(x,   7.9  , -3.75  , -6.91  , 8.12  , -0.23  , -6.25  , 6.47  , 6.71  , -1.36  , 10.17  , -9.07  , -1.94 );
                        kernels[21] = compute_kernel(x,   7.92  , -5.77  , -6.34  , 12.9  , 4.02  , -7.32  , 10.67  , 7.03  , -1.69  , 11.08  , -9.42  , -2.43 );
                        kernels[22] = compute_kernel(x,   4.66  , -6.05  , -5.8  , 5.82  , 0.02  , -8.57  , 8.23  , 8.81  , -2.23  , 6.74  , -5.72  , -2.61 );
                        kernels[23] = compute_kernel(x,   10.05  , -7.39  , -3.71  , 9.61  , 5.21  , -6.9  , 9.48  , 8.45  , 4.06  , 11.68  , -6.66  , 0.79 );
                        kernels[24] = compute_kernel(x,   7.92  , -6.56  , -4.25  , 7.67  , 4.25  , -7.45  , 7.87  , 8.6  , 2.28  , 9.39  , -6.34  , 0.39 );
                        kernels[25] = compute_kernel(x,   8.52  , -7.02  , -3.78  , 8.72  , 3.6  , -6.57  , 7.95  , 7.28  , 2.06  , 10.15  , -6.9  , 0.0 );
                        kernels[26] = compute_kernel(x,   9.19  , 0.29  , -10.92  , 7.87  , -2.55  , -8.69  , 20.0  , -4.45  , 0.81  , 14.21  , 1.61  , -9.49 );
                        kernels[27] = compute_kernel(x,   9.96  , 1.02  , -10.88  , 9.17  , -2.76  , -8.23  , 20.0  , -4.33  , 0.87  , 14.8  , 2.32  , -10.03 );
                        kernels[28] = compute_kernel(x,   11.01  , 1.64  , -10.62  , 10.3  , -2.86  , -8.01  , 18.44  , -0.62  , -1.05  , 12.17  , 2.43  , -10.93 );
                        kernels[29] = compute_kernel(x,   11.01  , 1.29  , -10.48  , 10.72  , -2.26  , -8.17  , 16.92  , -3.93  , 1.08  , 9.21  , 1.8  , -11.66 );
                        kernels[30] = compute_kernel(x,   9.54  , 0.15  , -10.82  , 7.74  , -2.58  , -8.92  , 20.0  , -5.54  , -2.86  , 13.9  , 1.08  , -8.66 );
                        kernels[31] = compute_kernel(x,   4.54  , 0.31  , -8.5  , 4.14  , 3.96  , -7.24  , 10.62  , 2.58  , -9.05  , 4.52  , -1.12  , -8.85 );
                        kernels[32] = compute_kernel(x,   4.74  , 0.41  , -8.72  , 4.0  , 3.03  , -7.2  , 11.26  , 2.92  , -8.61  , 4.52  , -1.12  , -8.85 );
                        kernels[33] = compute_kernel(x,   4.89  , 0.48  , -8.67  , 4.16  , 1.48  , -6.94  , 11.89  , 3.1  , -8.46  , 4.72  , -1.33  , -9.09 );
                        kernels[34] = compute_kernel(x,   11.04  , -1.48  , -8.99  , 10.83  , 1.81  , -9.06  , 11.8  , 0.36  , -8.84  , 7.08  , -1.8  , -9.64 );
                        kernels[35] = compute_kernel(x,   9.23  , -0.79  , -8.92  , 10.43  , 3.49  , -8.77  , 10.09  , 3.38  , -8.99  , 4.85  , -2.95  , -9.95 );
                        kernels[36] = compute_kernel(x,   9.92  , -3.22  , -8.98  , 9.6  , 2.45  , -8.1  , 7.7  , 1.14  , -10.09  , 6.79  , -3.71  , -8.66 );
                        kernels[37] = compute_kernel(x,   10.58  , -3.42  , -8.91  , 10.0  , 2.82  , -8.15  , 7.93  , 1.04  , -10.01  , 6.92  , -3.78  , -9.02 );
                        kernels[38] = compute_kernel(x,   10.55  , -3.65  , -8.78  , 9.96  , 2.88  , -8.16  , 8.12  , 0.83  , -9.84  , 7.04  , -3.37  , -9.25 );
                        kernels[39] = compute_kernel(x,   6.62  , -0.77  , -8.35  , 5.98  , -1.63  , -7.72  , 9.05  , -1.58  , -9.87  , 4.74  , -3.12  , -7.52 );
                        kernels[40] = compute_kernel(x,   9.61  , -4.21  , -8.78  , 4.38  , -0.38  , -9.6  , 7.36  , -1.32  , -8.92  , 10.41  , -1.34  , -10.14 );
                        kernels[41] = compute_kernel(x,   10.04  , -5.23  , -7.5  , 7.7  , -1.05  , -8.25  , 9.39  , 5.03  , -9.3  , 8.07  , 0.72  , -9.7 );
                        kernels[42] = compute_kernel(x,   11.5  , -4.18  , -8.23  , 9.07  , -1.42  , -7.99  , 10.17  , 2.39  , -11.48  , 9.66  , 2.12  , -10.21 );
                        kernels[43] = compute_kernel(x,   11.19  , -6.68  , -5.61  , 7.02  , -1.58  , -8.41  , 12.39  , 2.41  , -7.59  , 6.97  , 3.33  , -7.98 );
                        kernels[44] = compute_kernel(x,   0.24  , 1.12  , 0.15  , 6.97  , 2.45  , -9.18  , 11.59  , 5.85  , 4.26  , 1.65  , 5.18  , 2.43 );
                        kernels[45] = compute_kernel(x,   0.73  , 1.98  , 1.13  , 5.24  , 3.99  , -6.23  , 5.5  , 2.12  , 7.81  , 0.68  , 0.55  , -0.14 );
                        kernels[46] = compute_kernel(x,   0.28  , 2.38  , 0.61  , 5.22  , 3.09  , -6.4  , 6.11  , 3.1  , 6.84  , 0.41  , 1.81  , 0.71 );
                        kernels[47] = compute_kernel(x,   -0.16  , 0.6  , 0.0  , 6.21  , 5.07  , -5.81  , 6.66  , 3.32  , 6.55  , 0.11  , 0.9  , -0.84 );
                        kernels[48] = compute_kernel(x,   0.38  , 2.15  , -0.21  , 8.83  , 4.63  , -6.87  , 9.73  , 3.02  , 5.04  , 0.61  , 1.51  , -1.39 );
                        kernels[49] = compute_kernel(x,   0.96  , 0.69  , 0.89  , 8.76  , 7.63  , -3.01  , 9.63  , 1.52  , 9.51  , 0.81  , 3.27  , 1.62 );
                        kernels[50] = compute_kernel(x,   7.73  , -5.32  , -8.53  , 0.29  , -1.88  , -0.55  , 3.12  , -2.51  , 6.0  , 9.96  , 0.77  , 7.92 );
                        kernels[51] = compute_kernel(x,   3.53  , -3.37  , -7.09  , 0.51  , -3.03  , 0.22  , 0.73  , 0.26  , 2.85  , 5.41  , -4.51  , 3.72 );
                        kernels[52] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[53] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[54] = compute_kernel(x,   10.28  , -7.09  , -6.68  , 0.96  , -2.0  , -0.29  , 1.2  , -1.84  , -0.68  , 9.38  , -7.33  , 4.55 );
                        kernels[55] = compute_kernel(x,   6.55  , -7.12  , -4.19  , 0.77  , 0.84  , -2.83  , 0.07  , -0.32  , -3.18  , 8.13  , -4.97  , 6.71 );
                        kernels[56] = compute_kernel(x,   6.61  , -7.15  , -4.17  , 0.59  , 0.71  , -2.94  , 0.2  , -0.36  , -3.12  , 7.81  , -4.86  , 6.53 );
                        kernels[57] = compute_kernel(x,   6.72  , -6.46  , -3.99  , 0.5  , 0.38  , -2.9  , 0.13  , 0.04  , -2.91  , 8.13  , -4.25  , 6.68 );
                        kernels[58] = compute_kernel(x,   10.32  , -6.48  , -3.0  , 0.34  , -0.34  , 0.78  , 1.33  , -0.12  , 3.73  , 13.69  , -3.35  , 7.59 );
                        kernels[59] = compute_kernel(x,   9.18  , -7.86  , 4.13  , -0.29  , 0.13  , 0.91  , 0.67  , -0.27  , 2.43  , 9.39  , 2.98  , 9.67 );
                        kernels[60] = compute_kernel(x,   11.96  , -7.85  , 2.06  , 0.1  , -0.56  , -0.49  , 0.12  , 0.8  , 0.01  , 8.46  , -1.29  , 8.26 );
                        kernels[61] = compute_kernel(x,   12.41  , -6.86  , -5.42  , 14.01  , 5.12  , -4.98  , 11.23  , 6.9  , 4.2  , 13.22  , -5.62  , 6.53 );
                        kernels[62] = compute_kernel(x,   12.62  , -5.86  , -5.82  , 13.96  , 5.07  , -4.83  , 10.99  , 7.03  , 3.9  , 12.95  , -5.38  , 6.6 );
                        kernels[63] = compute_kernel(x,   12.76  , -6.98  , -5.54  , 14.21  , 5.12  , -5.24  , 10.48  , 7.29  , 4.27  , 13.53  , -6.48  , 6.54 );
                        kernels[64] = compute_kernel(x,   12.67  , -7.69  , -5.18  , 14.48  , 5.11  , -5.07  , 10.73  , 7.42  , 4.44  , 13.79  , -6.65  , 6.33 );
                        kernels[65] = compute_kernel(x,   14.72  , -2.98  , -8.83  , 16.4  , 0.69  , -6.63  , 16.26  , 5.07  , 4.15  , 19.63  , -1.34  , -2.8 );
                        kernels[66] = compute_kernel(x,   14.75  , -2.11  , -8.59  , 16.41  , 0.94  , -6.42  , 15.32  , 5.09  , 4.56  , 19.78  , 2.35  , -2.75 );
                        kernels[67] = compute_kernel(x,   14.73  , -1.82  , -8.37  , 16.53  , 0.91  , -6.4  , 15.28  , 5.11  , 4.69  , 19.78  , 2.35  , -2.75 );
                        kernels[68] = compute_kernel(x,   14.78  , -1.75  , -8.32  , 16.56  , 0.85  , -6.41  , 15.26  , 5.26  , 4.71  , 19.03  , -0.24  , -2.88 );
                        kernels[69] = compute_kernel(x,   14.27  , -2.55  , -7.7  , 16.81  , 0.84  , -6.17  , 14.92  , 5.31  , 4.97  , 18.49  , -2.38  , -2.95 );
                        kernels[70] = compute_kernel(x,   13.96  , -3.74  , -3.67  , 14.3  , 1.98  , -4.07  , 11.13  , 4.51  , 2.8  , 14.6  , -4.64  , 4.84 );
                        kernels[71] = compute_kernel(x,   14.23  , -3.88  , -3.61  , 14.27  , 1.84  , -4.08  , 11.0  , 4.61  , 2.79  , 13.89  , -3.28  , 4.9 );
                        kernels[72] = compute_kernel(x,   12.88  , -8.5  , -2.86  , 16.12  , 6.57  , -4.44  , 11.47  , 4.65  , 3.74  , 17.09  , -1.76  , 3.28 );
                        kernels[73] = compute_kernel(x,   15.81  , -5.87  , 3.23  , 15.9  , 6.03  , -0.99  , 10.38  , -0.39  , 10.01  , 8.32  , 0.42  , 8.89 );
                        kernels[74] = compute_kernel(x,   15.76  , -6.22  , 2.11  , 15.07  , 6.17  , -1.75  , 9.77  , -0.11  , 9.47  , 9.17  , -0.72  , 8.72 );
                        kernels[75] = compute_kernel(x,   15.48  , -5.93  , 1.86  , 15.14  , 6.12  , -2.08  , 10.27  , 0.04  , 10.15  , 9.3  , -0.88  , 8.04 );
                        decisions[0] = -3.724107247281
                        + kernels[4] * 0.001348635765
                        + kernels[6] * 0.010884435629
                        + kernels[9] * 0.010724640935
                        + kernels[16] * -0.003316150293
                        + kernels[18] * -0.009867565351
                        + kernels[21] * -0.009773996685
                        ;
                        decisions[1] = -8.337302745955
                        + kernels[0] * 0.023684095166
                        + kernels[1] * 0.013184103701
                        + kernels[5] * 0.039707717756
                        + kernels[27] * -0.012672620228
                        + kernels[30] * -0.012821099066
                        + kernels[34] * -0.040141731393
                        + kernels[38] * -0.000303195929
                        + kernels[42] * -0.010637270006
                        ;
                        decisions[2] = -1.134663254427
                        + kernels[8] * 0.003102420084
                        + kernels[13] * 0.000280699618
                        + kernels[48] * -0.003383119703
                        ;
                        decisions[3] = -1.016252760683
                        + kernels[7] * 0.000771112004
                        + kernels[10] * 0.002417368061
                        + kernels[14] * 9.5510942e-05
                        + kernels[54] * -0.003149265141
                        + kernels[56] * -0.000134725865
                        ;
                        decisions[4] = 0.823449824897
                        + kernels[2] * 0.004581174855
                        + kernels[3] * 0.006260207104
                        + kernels[11] * 0.001161686179
                        + kernels[12] * 0.001833721794
                        + kernels[65] * -0.011306873144
                        + kernels[70] * -0.001151079365
                        + kernels[72] * -0.001378837422
                        ;
                        decisions[5] = 0.600325033434
                        + kernels[16] * 0.015181835668
                        + kernels[18] * 0.02073149434
                        + kernels[26] * -0.004184132045
                        + kernels[32] * -0.002841651482
                        + kernels[33] * -0.00253309812
                        + kernels[35] * -0.004002059458
                        + kernels[36] * -0.008291594173
                        + kernels[41] * -0.014060794731
                        ;
                        decisions[6] = -0.745153651125
                        + kernels[17] * 0.001494701304
                        + kernels[22] * 0.002039309557
                        + kernels[24] * 0.00319343694
                        + kernels[44] * -0.001652230333
                        + kernels[47] * -0.001907026683
                        + kernels[48] * -0.003168190785
                        ;
                        decisions[7] = -0.976486028445
                        + kernels[19] * 0.000782992106
                        + kernels[20] * 0.006160103732
                        + kernels[25] * 0.001342238692
                        + kernels[51] * -0.001912577787
                        + kernels[54] * -0.004148681942
                        + kernels[55] * -0.001267510437
                        + kernels[57] * -0.000956564364
                        ;
                        decisions[8] = 3.556222337835
                        + kernels[15] * 0.000594625223
                        + kernels[23] * 0.027162655068
                        + kernels[61] * -0.006683612424
                        + kernels[63] * -0.013771034446
                        + kernels[64] * -0.00509545389
                        + kernels[69] * -0.002207179531
                        ;
                        decisions[9] = -0.664197043665
                        + kernels[29] * 0.001348374222
                        + kernels[31] * 0.004089051897
                        + kernels[48] * -0.005437426119
                        ;
                        decisions[10] = -0.647152800105
                        + kernels[39] * 0.003473528849
                        + kernels[40] * 0.00111478052
                        + kernels[43] * 7.9128576e-05
                        + kernels[52] * -0.001213379809
                        + kernels[54] * -0.001182121935
                        + kernels[56] * -0.002271936201
                        ;
                        decisions[11] = 1.075523780834
                        + kernels[27] * 0.001764885287
                        + kernels[28] * 0.004598608838
                        + kernels[37] * 0.000389669645
                        + kernels[41] * 0.000385864732
                        + kernels[65] * -0.001187061999
                        + kernels[66] * -0.002489844665
                        + kernels[68] * -0.003462121838
                        ;
                        decisions[12] = -0.118030196138
                        + kernels[45] * 0.004959395104
                        + kernels[46] * 0.001800851199
                        + kernels[53] * -0.006037681804
                        + kernels[59] * -0.000722564498
                        ;
                        decisions[13] = 1.25458315412
                        + kernels[49] * 0.004672604122
                        + kernels[62] * -0.000702452506
                        + kernels[67] * -7.6429547e-05
                        + kernels[73] * -0.000380728247
                        + kernels[75] * -0.003512993822
                        ;
                        decisions[14] = 1.134386223728
                        + kernels[50] * 0.000253900107
                        + kernels[58] * 0.004922329633
                        + kernels[60] * 0.000431995714
                        + kernels[70] * -5.533824e-06
                        + kernels[71] * -0.004059468846
                        + kernels[74] * -0.001543222784
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }