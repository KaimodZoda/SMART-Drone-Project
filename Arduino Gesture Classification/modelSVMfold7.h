#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[58] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.76  , -3.26  , -9.37  , 11.73  , 2.21  , -9.7  , 14.92  , -2.63  , -9.35  , 14.02  , -3.15  , -9.27 );
                        kernels[1] = compute_kernel(x,   12.92  , -3.16  , -9.24  , 11.53  , 1.5  , -9.56  , 14.5  , -3.08  , -9.5  , 14.01  , -2.44  , -9.26 );
                        kernels[2] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[3] = compute_kernel(x,   13.71  , -6.86  , -3.13  , 12.61  , 5.61  , -5.3  , 18.73  , 1.64  , -3.42  , 15.91  , 0.96  , -7.18 );
                        kernels[4] = compute_kernel(x,   13.63  , -6.83  , -2.77  , 12.03  , 5.92  , -5.36  , 18.57  , 2.05  , -3.07  , 15.02  , 0.81  , -7.85 );
                        kernels[5] = compute_kernel(x,   13.91  , -7.39  , -2.59  , 11.97  , 6.06  , -5.16  , 18.68  , 2.91  , -3.16  , 15.55  , 0.21  , -7.15 );
                        kernels[6] = compute_kernel(x,   13.67  , -6.97  , -2.81  , 12.18  , 5.66  , -4.92  , 18.49  , 1.72  , -3.35  , 15.16  , 0.87  , -7.54 );
                        kernels[7] = compute_kernel(x,   8.62  , 0.0  , -10.33  , 9.02  , -1.92  , -9.65  , 9.43  , 7.52  , -4.34  , 10.07  , -6.76  , -1.67 );
                        kernels[8] = compute_kernel(x,   8.39  , 0.27  , -10.38  , 8.91  , -1.56  , -9.76  , 9.44  , 7.11  , -4.26  , 10.13  , -6.84  , -1.78 );
                        kernels[9] = compute_kernel(x,   8.46  , 0.26  , -10.41  , 9.02  , -1.21  , -10.0  , 9.63  , 6.84  , -4.13  , 10.13  , -6.84  , -1.78 );
                        kernels[10] = compute_kernel(x,   8.71  , 0.05  , -10.39  , 9.29  , -1.04  , -9.94  , 9.82  , 6.88  , -4.09  , 10.21  , -7.57  , -1.74 );
                        kernels[11] = compute_kernel(x,   6.75  , -0.39  , -10.3  , 8.18  , -2.62  , -9.21  , 8.58  , 7.17  , -4.42  , 8.57  , -7.89  , -0.85 );
                        kernels[12] = compute_kernel(x,   10.05  , -7.39  , -3.71  , 9.61  , 5.21  , -6.9  , 9.48  , 8.45  , 4.06  , 11.68  , -6.66  , 0.79 );
                        kernels[13] = compute_kernel(x,   9.93  , -7.6  , -3.42  , 9.79  , 5.46  , -6.78  , 9.64  , 8.67  , 4.09  , 11.68  , -6.66  , 0.79 );
                        kernels[14] = compute_kernel(x,   9.72  , -7.82  , -2.98  , 9.58  , 5.98  , -6.27  , 9.46  , 8.74  , 3.47  , 11.7  , -6.75  , 0.26 );
                        kernels[15] = compute_kernel(x,   9.42  , -8.01  , -3.17  , 9.41  , 4.01  , -6.37  , 8.66  , 8.21  , 2.02  , 9.93  , -6.68  , -0.91 );
                        kernels[16] = compute_kernel(x,   8.46  , -6.55  , -4.09  , 7.53  , 3.33  , -6.62  , 7.58  , 8.98  , 2.17  , 9.65  , -6.56  , 0.05 );
                        kernels[17] = compute_kernel(x,   7.92  , -6.56  , -4.25  , 7.67  , 4.25  , -7.45  , 7.87  , 8.6  , 2.28  , 9.39  , -6.34  , 0.39 );
                        kernels[18] = compute_kernel(x,   8.42  , -6.88  , -3.78  , 8.71  , 3.45  , -6.15  , 7.75  , 8.01  , 1.95  , 10.59  , -5.82  , -0.02 );
                        kernels[19] = compute_kernel(x,   9.85  , 6.98  , -9.15  , 10.83  , -8.23  , -5.19  , 10.74  , -5.28  , -9.74  , 8.1  , -0.53  , -11.35 );
                        kernels[20] = compute_kernel(x,   9.1  , 5.54  , -9.88  , 10.77  , -7.63  , -5.79  , 8.78  , -3.08  , -10.39  , 6.46  , -3.27  , -10.09 );
                        kernels[21] = compute_kernel(x,   9.98  , 5.13  , -10.53  , 10.69  , -8.1  , -5.13  , 8.49  , -4.18  , -10.22  , 6.97  , -4.35  , -10.19 );
                        kernels[22] = compute_kernel(x,   9.69  , 4.66  , -10.45  , 10.63  , -8.33  , -4.88  , 8.15  , -4.44  , -10.41  , 7.24  , -4.03  , -9.83 );
                        kernels[23] = compute_kernel(x,   9.84  , 5.79  , -9.46  , 10.73  , -8.01  , -4.9  , 8.4  , -4.22  , -9.92  , 7.34  , -3.02  , -10.01 );
                        kernels[24] = compute_kernel(x,   9.51  , 4.49  , -10.42  , 9.85  , -8.2  , -4.63  , 7.76  , -4.69  , -10.19  , 8.76  , -2.96  , -10.74 );
                        kernels[25] = compute_kernel(x,   10.04  , -5.23  , -7.5  , 7.7  , -1.05  , -8.25  , 9.39  , 5.03  , -9.3  , 8.07  , 0.72  , -9.7 );
                        kernels[26] = compute_kernel(x,   8.24  , -1.99  , -7.69  , 6.41  , -1.7  , -7.7  , 8.61  , 3.54  , -8.22  , 5.77  , 3.1  , -9.39 );
                        kernels[27] = compute_kernel(x,   11.5  , -4.18  , -8.23  , 9.07  , -1.42  , -7.99  , 10.17  , 2.39  , -11.48  , 9.66  , 2.12  , -10.21 );
                        kernels[28] = compute_kernel(x,   10.09  , -1.61  , -8.07  , 7.23  , -1.54  , -7.93  , 9.08  , 3.53  , -7.47  , 7.04  , 3.81  , -8.74 );
                        kernels[29] = compute_kernel(x,   9.19  , -1.43  , -8.04  , 7.02  , -1.29  , -8.09  , 9.21  , 3.49  , -7.36  , 5.86  , 3.97  , -9.18 );
                        kernels[30] = compute_kernel(x,   11.8  , -6.86  , -5.97  , 7.02  , -1.33  , -8.33  , 12.37  , 2.02  , -7.58  , 6.97  , 3.33  , -7.98 );
                        kernels[31] = compute_kernel(x,   9.95  , -2.92  , -7.7  , 7.36  , -1.77  , -9.36  , 12.39  , -2.47  , -9.8  , 6.88  , 3.9  , -10.37 );
                        kernels[32] = compute_kernel(x,   0.24  , -0.02  , 0.23  , 6.41  , 3.04  , -8.56  , 11.17  , 4.48  , 6.34  , 1.59  , 4.19  , 2.88 );
                        kernels[33] = compute_kernel(x,   0.03  , 1.24  , 0.59  , 6.68  , 2.02  , -8.11  , 10.76  , 2.9  , 6.37  , 1.82  , 5.26  , 2.92 );
                        kernels[34] = compute_kernel(x,   0.01  , 0.95  , 0.43  , 6.13  , 2.24  , -9.37  , 11.0  , 6.43  , 5.13  , 1.32  , 4.6  , 2.37 );
                        kernels[35] = compute_kernel(x,   0.23  , 0.98  , 0.16  , 7.11  , 2.23  , -8.97  , 11.52  , 5.46  , 4.36  , 1.57  , 5.02  , 2.48 );
                        kernels[36] = compute_kernel(x,   0.24  , 1.12  , 0.15  , 6.97  , 2.45  , -9.18  , 11.59  , 5.85  , 4.26  , 1.65  , 5.18  , 2.43 );
                        kernels[37] = compute_kernel(x,   0.01  , 1.05  , 0.19  , 7.92  , 7.95  , -2.48  , 6.5  , 2.19  , 8.08  , -0.4  , 2.39  , 0.57 );
                        kernels[38] = compute_kernel(x,   0.96  , 0.69  , 0.89  , 8.76  , 7.63  , -3.01  , 9.63  , 1.52  , 9.51  , 0.81  , 3.27  , 1.62 );
                        kernels[39] = compute_kernel(x,   1.47  , 1.7  , 0.73  , 7.41  , 7.99  , -3.31  , 9.64  , 1.76  , 9.7  , 0.55  , 1.08  , -0.17 );
                        kernels[40] = compute_kernel(x,   0.95  , 1.12  , 0.54  , 8.53  , 7.78  , -3.55  , 10.32  , 1.18  , 9.83  , 0.55  , 1.08  , -0.17 );
                        kernels[41] = compute_kernel(x,   7.86  , -5.16  , -8.37  , 0.35  , -1.15  , -0.46  , 2.72  , -3.48  , 5.89  , 10.1  , 0.91  , 7.91 );
                        kernels[42] = compute_kernel(x,   5.89  , -2.14  , -7.66  , 0.65  , -2.56  , -0.1  , 0.95  , -0.55  , 3.43  , 8.75  , -1.02  , 4.46 );
                        kernels[43] = compute_kernel(x,   5.82  , -2.47  , -7.61  , 0.54  , -2.36  , -0.09  , 0.96  , -0.38  , 3.41  , 8.24  , -1.53  , 4.29 );
                        kernels[44] = compute_kernel(x,   3.53  , -3.37  , -7.09  , 0.51  , -3.03  , 0.22  , 0.73  , 0.26  , 2.85  , 5.41  , -4.51  , 3.72 );
                        kernels[45] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[46] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[47] = compute_kernel(x,   6.05  , -3.61  , -7.82  , 0.8  , -2.3  , -0.6  , 1.05  , -0.54  , 3.07  , 10.82  , 1.29  , 6.43 );
                        kernels[48] = compute_kernel(x,   9.02  , -8.98  , 2.32  , -0.03  , 0.03  , 0.85  , 0.08  , 0.66  , 0.62  , 7.8  , -2.28  , 8.32 );
                        kernels[49] = compute_kernel(x,   10.24  , -8.44  , 2.68  , -0.1  , -0.32  , 0.86  , 0.1  , 0.39  , 0.8  , 9.18  , -0.14  , 8.55 );
                        kernels[50] = compute_kernel(x,   9.49  , -8.32  , 4.39  , 0.04  , -0.2  , 0.85  , 0.65  , -0.71  , 2.47  , 9.33  , 2.65  , 9.54 );
                        kernels[51] = compute_kernel(x,   9.18  , -7.86  , 4.13  , -0.29  , 0.13  , 0.91  , 0.67  , -0.27  , 2.43  , 9.39  , 2.98  , 9.67 );
                        kernels[52] = compute_kernel(x,   19.22  , -1.11  , -2.47  , 18.76  , 3.13  , -1.57  , 16.32  , 0.87  , 4.96  , 15.16  , 2.22  , 5.69 );
                        kernels[53] = compute_kernel(x,   18.71  , -1.5  , -3.42  , 17.55  , 3.84  , -4.11  , 13.29  , 2.77  , 6.65  , 15.33  , 0.53  , 5.17 );
                        kernels[54] = compute_kernel(x,   18.71  , -1.58  , -3.5  , 17.71  , 4.0  , -4.21  , 13.32  , 2.96  , 6.68  , 15.28  , 0.32  , 5.01 );
                        kernels[55] = compute_kernel(x,   15.76  , -6.22  , 2.11  , 15.07  , 6.17  , -1.75  , 9.77  , -0.11  , 9.47  , 9.17  , -0.72  , 8.72 );
                        kernels[56] = compute_kernel(x,   15.48  , -5.93  , 1.86  , 15.14  , 6.12  , -2.08  , 10.27  , 0.04  , 10.15  , 9.3  , -0.88  , 8.04 );
                        kernels[57] = compute_kernel(x,   15.66  , -6.45  , 1.43  , 15.23  , 6.22  , -2.13  , 10.36  , 0.46  , 9.6  , 8.76  , -1.58  , 8.32 );
                        decisions[0] = -1.631151543205
                        + kernels[0] * 0.004514938589
                        + kernels[5] * 0.002835976763
                        + kernels[9] * -0.003594372159
                        + kernels[10] * -0.001484002552
                        + kernels[14] * -0.001397929982
                        + kernels[15] * -0.000874610659
                        ;
                        decisions[1] = -4.123294485615
                        + kernels[2] * 0.022912470948
                        + kernels[19] * -0.00287448272
                        + kernels[27] * -0.012257263718
                        + kernels[31] * -0.007780724509
                        ;
                        decisions[2] = -1.094142289626
                        + kernels[4] * 0.002844783431
                        + kernels[36] * -0.001762643016
                        + kernels[40] * -0.001082140415
                        ;
                        decisions[3] = -1.014537440841
                        + kernels[1] * 0.00118992779
                        + kernels[6] * 0.001266970229
                        + kernels[42] * -0.001834656788
                        + kernels[47] * -0.000277211052
                        + kernels[49] * -0.000345030179
                        ;
                        decisions[4] = 0.299785398212
                        + kernels[3] * 0.005586679317
                        + kernels[52] * -0.002707295548
                        + kernels[54] * -0.002879383769
                        ;
                        decisions[5] = -0.117753456882
                        + kernels[7] * 0.007094733288
                        + kernels[8] * 0.004062792325
                        + kernels[20] * -0.000697537324
                        + kernels[21] * -0.002118660642
                        + kernels[25] * -0.008341327648
                        ;
                        decisions[6] = -0.607054066627
                        + kernels[17] * 0.00582150318
                        + kernels[32] * -0.004135504465
                        + kernels[34] * -0.000366346614
                        + kernels[39] * -0.001319652101
                        ;
                        decisions[7] = -1.117302744182
                        + kernels[11] * 0.001394845263
                        + kernels[16] * 0.003725898399
                        + kernels[18] * 0.001433114327
                        + kernels[43] * -0.002113556405
                        + kernels[44] * -0.00297967825
                        + kernels[48] * -0.001460623334
                        ;
                        decisions[8] = 1.151562203353
                        + kernels[12] * 0.007145902049
                        + kernels[13] * 0.000296228669
                        + kernels[54] * -0.003376273837
                        + kernels[57] * -0.004065856881
                        ;
                        decisions[9] = -0.428372634781
                        + kernels[29] * 0.00426857699
                        + kernels[35] * -0.00426857699
                        ;
                        decisions[10] = -0.652521906898
                        + kernels[22] * 0.000363227549
                        + kernels[24] * 0.000175925289
                        + kernels[26] * 0.003154094413
                        + kernels[28] * 0.000174178527
                        + kernels[43] * -0.003160689892
                        + kernels[45] * -0.000706735886
                        ;
                        decisions[11] = 0.731781450685
                        + kernels[23] * 0.000117386055
                        + kernels[30] * 0.00277359413
                        + kernels[53] * -0.002773011332
                        + kernels[57] * -0.000117968854
                        ;
                        decisions[12] = -0.294707253785
                        + kernels[33] * 0.00247127581
                        + kernels[37] * 0.003098145754
                        + kernels[46] * -0.004494006792
                        + kernels[51] * -0.001075414772
                        ;
                        decisions[13] = 1.302603613296
                        + kernels[38] * 0.004619217986
                        + kernels[56] * -0.004619217986
                        ;
                        decisions[14] = 1.318555603851
                        + kernels[41] * 0.001657004469
                        + kernels[50] * 0.002894883014
                        + kernels[55] * -0.004551887483
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }