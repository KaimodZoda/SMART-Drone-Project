#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[76] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[1] = compute_kernel(x,   11.92  , -6.53  , -6.23  , 11.81  , 7.11  , -4.91  , 14.78  , 7.71  , -6.18  , 17.55  , -4.45  , -6.83 );
                        kernels[2] = compute_kernel(x,   11.86  , -6.53  , -6.35  , 11.88  , 7.11  , -4.85  , 14.84  , 7.87  , -6.24  , 17.55  , -4.45  , -6.83 );
                        kernels[3] = compute_kernel(x,   11.92  , -5.43  , -5.66  , 9.36  , 1.55  , -11.09  , 16.59  , 2.26  , -7.58  , 9.63  , -8.24  , -10.0 );
                        kernels[4] = compute_kernel(x,   12.2  , -5.04  , -6.16  , 9.25  , 1.0  , -11.02  , 16.38  , 1.82  , -7.93  , 9.37  , -8.03  , -10.5 );
                        kernels[5] = compute_kernel(x,   12.53  , -5.3  , -5.5  , 9.3  , 1.4  , -10.75  , 16.17  , 2.31  , -7.32  , 10.34  , -7.92  , -9.67 );
                        kernels[6] = compute_kernel(x,   12.56  , -5.7  , -4.73  , 9.13  , 2.48  , -10.5  , 16.16  , 3.52  , -7.53  , 10.26  , -8.66  , -9.75 );
                        kernels[7] = compute_kernel(x,   12.63  , -5.66  , -4.74  , 8.89  , 2.74  , -10.42  , 16.0  , 3.54  , -7.48  , 10.33  , -8.49  , -9.82 );
                        kernels[8] = compute_kernel(x,   14.54  , -4.9  , -5.43  , 10.43  , 2.29  , -10.48  , 15.86  , 0.15  , -7.13  , 17.6  , 0.99  , -6.78 );
                        kernels[9] = compute_kernel(x,   14.01  , -3.32  , -7.08  , 13.96  , 4.86  , -5.38  , 18.25  , -0.26  , -4.3  , 16.8  , -1.78  , -6.61 );
                        kernels[10] = compute_kernel(x,   13.63  , -6.83  , -2.77  , 12.03  , 5.92  , -5.36  , 18.57  , 2.05  , -3.07  , 15.02  , 0.81  , -7.85 );
                        kernels[11] = compute_kernel(x,   13.91  , -7.39  , -2.59  , 11.97  , 6.06  , -5.16  , 18.68  , 2.91  , -3.16  , 15.55  , 0.21  , -7.15 );
                        kernels[12] = compute_kernel(x,   13.67  , -6.97  , -2.81  , 12.18  , 5.66  , -4.92  , 18.49  , 1.72  , -3.35  , 15.16  , 0.87  , -7.54 );
                        kernels[13] = compute_kernel(x,   11.09  , -7.1  , -5.78  , 10.75  , 6.87  , -7.31  , 13.08  , -0.23  , -11.13  , 16.75  , -2.3  , -7.46 );
                        kernels[14] = compute_kernel(x,   8.61  , -0.06  , -10.79  , 9.58  , -1.07  , -10.13  , 10.37  , 7.33  , -4.26  , 10.22  , -8.07  , -1.91 );
                        kernels[15] = compute_kernel(x,   8.39  , 0.27  , -10.38  , 8.91  , -1.56  , -9.76  , 9.44  , 7.11  , -4.26  , 10.13  , -6.84  , -1.78 );
                        kernels[16] = compute_kernel(x,   7.4  , -0.51  , -10.43  , 8.6  , -3.02  , -9.07  , 9.18  , 6.71  , -4.61  , 9.39  , -7.61  , -0.87 );
                        kernels[17] = compute_kernel(x,   5.56  , -5.53  , -7.3  , 7.19  , 6.4  , -5.81  , 5.52  , 7.01  , 2.16  , 5.03  , -6.87  , -1.88 );
                        kernels[18] = compute_kernel(x,   6.01  , -4.85  , -7.64  , 6.56  , 5.77  , -5.76  , 5.22  , 6.53  , 1.66  , 5.61  , -6.86  , -2.28 );
                        kernels[19] = compute_kernel(x,   10.05  , -7.39  , -3.71  , 9.61  , 5.21  , -6.9  , 9.48  , 8.45  , 4.06  , 11.68  , -6.66  , 0.79 );
                        kernels[20] = compute_kernel(x,   9.93  , -7.6  , -3.42  , 9.79  , 5.46  , -6.78  , 9.64  , 8.67  , 4.09  , 11.68  , -6.66  , 0.79 );
                        kernels[21] = compute_kernel(x,   8.07  , -7.03  , -3.76  , 7.54  , 3.83  , -6.05  , 8.32  , 9.46  , 2.32  , 10.33  , -5.41  , -0.06 );
                        kernels[22] = compute_kernel(x,   8.42  , -6.88  , -3.78  , 8.71  , 3.45  , -6.15  , 7.75  , 8.01  , 1.95  , 10.59  , -5.82  , -0.02 );
                        kernels[23] = compute_kernel(x,   9.08  , -8.49  , -0.68  , 7.56  , 7.58  , -6.86  , 9.64  , 9.31  , -4.18  , 10.94  , -9.39  , -1.35 );
                        kernels[24] = compute_kernel(x,   8.84  , -8.62  , -0.9  , 7.54  , 7.95  , -7.43  , 9.67  , 10.12  , -4.7  , 10.66  , -9.51  , -1.8 );
                        kernels[25] = compute_kernel(x,   10.81  , 5.21  , -6.57  , 10.9  , -5.37  , -5.33  , 8.91  , 2.83  , -8.61  , 7.76  , -0.23  , -10.6 );
                        kernels[26] = compute_kernel(x,   10.36  , 4.56  , -8.04  , 9.27  , -5.64  , -6.21  , 8.8  , 4.21  , -9.21  , 7.99  , -1.25  , -10.33 );
                        kernels[27] = compute_kernel(x,   10.98  , 4.91  , -6.71  , 10.43  , -5.95  , -5.49  , 9.24  , 1.38  , -8.7  , 9.49  , -0.76  , -10.92 );
                        kernels[28] = compute_kernel(x,   5.56  , -3.67  , -7.83  , 1.37  , -1.05  , -7.0  , 6.91  , -3.47  , -10.61  , 3.49  , -4.25  , -11.57 );
                        kernels[29] = compute_kernel(x,   9.04  , 0.72  , -9.84  , 8.58  , -0.47  , -7.96  , 10.62  , -1.92  , -9.53  , 9.38  , -1.76  , -10.75 );
                        kernels[30] = compute_kernel(x,   9.08  , 0.64  , -9.77  , 8.46  , -0.34  , -7.9  , 10.58  , -1.3  , -9.57  , 9.64  , -2.02  , -10.35 );
                        kernels[31] = compute_kernel(x,   10.04  , -5.23  , -7.5  , 7.7  , -1.05  , -8.25  , 9.39  , 5.03  , -9.3  , 8.07  , 0.72  , -9.7 );
                        kernels[32] = compute_kernel(x,   11.5  , -4.18  , -8.23  , 9.07  , -1.42  , -7.99  , 10.17  , 2.39  , -11.48  , 9.66  , 2.12  , -10.21 );
                        kernels[33] = compute_kernel(x,   10.09  , -1.61  , -8.07  , 7.23  , -1.54  , -7.93  , 9.08  , 3.53  , -7.47  , 7.04  , 3.81  , -8.74 );
                        kernels[34] = compute_kernel(x,   9.19  , -1.43  , -8.04  , 7.02  , -1.29  , -8.09  , 9.21  , 3.49  , -7.36  , 5.86  , 3.97  , -9.18 );
                        kernels[35] = compute_kernel(x,   12.11  , -6.94  , -6.29  , 7.02  , -1.12  , -8.18  , 11.76  , 1.42  , -7.92  , 7.55  , 3.21  , -8.56 );
                        kernels[36] = compute_kernel(x,   11.8  , -6.86  , -5.97  , 7.02  , -1.33  , -8.33  , 12.37  , 2.02  , -7.58  , 6.97  , 3.33  , -7.98 );
                        kernels[37] = compute_kernel(x,   6.97  , -0.4  , -9.82  , 6.61  , 1.49  , -10.07  , 7.75  , -0.52  , -10.71  , 5.41  , -1.5  , -9.5 );
                        kernels[38] = compute_kernel(x,   0.24  , -0.02  , 0.23  , 6.41  , 3.04  , -8.56  , 11.17  , 4.48  , 6.34  , 1.59  , 4.19  , 2.88 );
                        kernels[39] = compute_kernel(x,   0.23  , 0.98  , 0.16  , 7.11  , 2.23  , -8.97  , 11.52  , 5.46  , 4.36  , 1.57  , 5.02  , 2.48 );
                        kernels[40] = compute_kernel(x,   0.32  , 1.06  , 0.55  , 10.45  , 4.19  , -7.3  , 11.86  , 5.23  , 8.47  , 1.25  , 2.43  , 0.97 );
                        kernels[41] = compute_kernel(x,   0.43  , 0.52  , -0.19  , 9.87  , 4.96  , -7.4  , 11.43  , 6.18  , 9.76  , 1.81  , 2.49  , 1.29 );
                        kernels[42] = compute_kernel(x,   0.59  , 0.88  , 0.18  , 8.43  , 3.02  , -6.98  , 10.15  , 5.65  , 10.72  , 1.92  , 2.11  , 1.73 );
                        kernels[43] = compute_kernel(x,   0.57  , 0.94  , -0.01  , 10.15  , 3.09  , -7.06  , 11.95  , 4.21  , 9.86  , 1.8  , 2.19  , 2.05 );
                        kernels[44] = compute_kernel(x,   0.74  , 1.24  , 0.36  , 9.21  , 1.54  , -6.43  , 11.84  , 1.92  , 10.33  , 2.28  , 3.17  , 2.58 );
                        kernels[45] = compute_kernel(x,   0.06  , 3.34  , 1.21  , 4.24  , 5.77  , -4.86  , 5.29  , -0.24  , 4.73  , 0.68  , 5.3  , 1.46 );
                        kernels[46] = compute_kernel(x,   -0.13  , 3.3  , 1.16  , 3.69  , 4.66  , -5.08  , 5.52  , 0.38  , 4.48  , 0.96  , 5.59  , 2.06 );
                        kernels[47] = compute_kernel(x,   0.18  , 0.47  , 0.62  , 6.6  , 8.27  , -3.94  , 6.68  , 4.89  , 8.75  , -0.01  , 2.02  , 0.71 );
                        kernels[48] = compute_kernel(x,   0.96  , 0.69  , 0.89  , 8.76  , 7.63  , -3.01  , 9.63  , 1.52  , 9.51  , 0.81  , 3.27  , 1.62 );
                        kernels[49] = compute_kernel(x,   0.95  , 1.12  , 0.54  , 8.53  , 7.78  , -3.55  , 10.32  , 1.18  , 9.83  , 0.55  , 1.08  , -0.17 );
                        kernels[50] = compute_kernel(x,   0.17  , 0.43  , 0.94  , 8.91  , 10.15  , 1.26  , 9.15  , 5.88  , 7.01  , 0.57  , 2.21  , 1.6 );
                        kernels[51] = compute_kernel(x,   0.15  , 0.37  , 1.27  , 8.36  , 10.26  , 0.45  , 7.91  , 7.06  , 5.28  , 0.55  , 1.52  , 1.65 );
                        kernels[52] = compute_kernel(x,   7.86  , -5.16  , -8.37  , 0.35  , -1.15  , -0.46  , 2.72  , -3.48  , 5.89  , 10.1  , 0.91  , 7.91 );
                        kernels[53] = compute_kernel(x,   5.82  , -2.47  , -7.61  , 0.54  , -2.36  , -0.09  , 0.96  , -0.38  , 3.41  , 8.24  , -1.53  , 4.29 );
                        kernels[54] = compute_kernel(x,   5.66  , -2.41  , -7.47  , 0.44  , -2.34  , -0.18  , 0.96  , -0.63  , 3.38  , 8.24  , -1.53  , 4.29 );
                        kernels[55] = compute_kernel(x,   3.53  , -3.37  , -7.09  , 0.51  , -3.03  , 0.22  , 0.73  , 0.26  , 2.85  , 5.41  , -4.51  , 3.72 );
                        kernels[56] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[57] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[58] = compute_kernel(x,   9.45  , -3.41  , -8.22  , 0.63  , -1.76  , 3.33  , 1.91  , -2.25  , 2.14  , 10.53  , -4.77  , 5.76 );
                        kernels[59] = compute_kernel(x,   5.89  , -4.83  , 4.05  , 0.09  , -2.6  , 0.8  , 0.71  , -2.76  , 1.18  , 5.84  , 3.97  , 7.92 );
                        kernels[60] = compute_kernel(x,   11.57  , -7.9  , -2.98  , 0.39  , -0.38  , 0.79  , 0.99  , 0.38  , 3.8  , 13.84  , -4.8  , 8.61 );
                        kernels[61] = compute_kernel(x,   10.91  , -7.71  , -3.12  , 0.63  , -0.61  , 0.79  , 0.79  , -0.57  , 3.64  , 11.83  , -4.72  , 6.52 );
                        kernels[62] = compute_kernel(x,   10.3  , -7.28  , -2.87  , 0.18  , 0.09  , 0.68  , 0.79  , 0.11  , 4.06  , 11.46  , -5.49  , 6.45 );
                        kernels[63] = compute_kernel(x,   10.27  , -8.48  , 4.32  , 0.3  , -0.64  , 0.78  , 0.21  , -0.73  , 2.06  , 9.48  , 2.88  , 9.39 );
                        kernels[64] = compute_kernel(x,   9.49  , -8.32  , 4.39  , 0.04  , -0.2  , 0.85  , 0.65  , -0.71  , 2.47  , 9.33  , 2.65  , 9.54 );
                        kernels[65] = compute_kernel(x,   11.76  , -7.83  , 2.31  , 0.0  , -0.62  , -0.48  , -0.05  , 1.02  , -0.41  , 8.21  , -0.95  , 7.94 );
                        kernels[66] = compute_kernel(x,   19.22  , -1.11  , -2.47  , 18.76  , 3.13  , -1.57  , 16.32  , 0.87  , 4.96  , 15.16  , 2.22  , 5.69 );
                        kernels[67] = compute_kernel(x,   18.71  , -1.58  , -3.5  , 17.71  , 4.0  , -4.21  , 13.32  , 2.96  , 6.68  , 15.28  , 0.32  , 5.01 );
                        kernels[68] = compute_kernel(x,   16.21  , -4.17  , -2.52  , 16.98  , 4.12  , -1.89  , 11.32  , 3.18  , 9.98  , 9.07  , 0.77  , 6.65 );
                        kernels[69] = compute_kernel(x,   16.96  , -6.43  , -1.38  , 16.98  , 3.9  , -2.94  , 11.64  , 3.38  , 9.27  , 10.06  , 0.19  , 6.45 );
                        kernels[70] = compute_kernel(x,   18.09  , -1.9  , -1.07  , 16.79  , 1.22  , -7.33  , 9.73  , 1.7  , 4.87  , 14.57  , 1.93  , 7.38 );
                        kernels[71] = compute_kernel(x,   17.72  , -1.8  , 0.0  , 16.27  , 2.0  , -7.54  , 9.25  , 2.89  , 4.9  , 13.79  , 2.13  , 7.87 );
                        kernels[72] = compute_kernel(x,   18.15  , -1.99  , -0.34  , 16.37  , 1.97  , -7.13  , 8.8  , 1.9  , 4.82  , 14.27  , 1.97  , 7.9 );
                        kernels[73] = compute_kernel(x,   15.76  , -6.22  , 2.11  , 15.07  , 6.17  , -1.75  , 9.77  , -0.11  , 9.47  , 9.17  , -0.72  , 8.72 );
                        kernels[74] = compute_kernel(x,   15.48  , -5.93  , 1.86  , 15.14  , 6.12  , -2.08  , 10.27  , 0.04  , 10.15  , 9.3  , -0.88  , 8.04 );
                        kernels[75] = compute_kernel(x,   15.66  , -6.45  , 1.43  , 15.23  , 6.22  , -2.13  , 10.36  , 0.46  , 9.6  , 8.76  , -1.58  , 8.32 );
                        decisions[0] = -2.841742768992
                        + kernels[2] * 0.007439118099
                        + kernels[6] * 0.002041103566
                        + kernels[7] * 0.006602088679
                        + kernels[14] * -0.007086410271
                        + kernels[23] * -0.002966971725
                        + kernels[24] * -0.006028928348
                        ;
                        decisions[1] = -5.970618537002
                        + kernels[0] * 0.022140918092
                        + kernels[4] * 0.011679861925
                        + kernels[29] * -0.004483651099
                        + kernels[30] * -0.0179197257
                        + kernels[32] * -0.001452237835
                        + kernels[35] * -0.009965165383
                        ;
                        decisions[2] = -1.020781491053
                        + kernels[3] * 0.000790824596
                        + kernels[10] * 0.002113983542
                        + kernels[39] * -0.001992372036
                        + kernels[40] * -0.000109838822
                        + kernels[49] * -0.00080259728
                        ;
                        decisions[3] = -0.931374018898
                        + kernels[1] * 0.000880270921
                        + kernels[5] * 0.000667676718
                        + kernels[8] * 0.000159873189
                        + kernels[12] * 0.000556017378
                        + kernels[13] * 0.000363701501
                        + kernels[53] * -0.000778529128
                        + kernels[58] * -0.000134760308
                        + kernels[61] * -0.001603724537
                        + kernels[65] * -0.000110525734
                        ;
                        decisions[4] = 0.242265183379
                        + kernels[9] * 0.00399567899
                        + kernels[11] * 0.001905420254
                        + kernels[66] * -0.002396845947
                        + kernels[67] * -0.003504253297
                        ;
                        decisions[5] = -0.107565656636
                        + kernels[15] * 0.012152003095
                        + kernels[26] * -0.004965842461
                        + kernels[30] * -0.001621977657
                        + kernels[31] * -0.00474827001
                        + kernels[37] * -0.000815912967
                        ;
                        decisions[6] = -0.364877425804
                        + kernels[17] * 0.005884545404
                        + kernels[21] * 0.001207177653
                        + kernels[38] * -0.001512062406
                        + kernels[41] * -0.000937743431
                        + kernels[42] * -0.000865873272
                        + kernels[47] * -0.000113357143
                        + kernels[51] * -0.003662686804
                        ;
                        decisions[7] = -0.840752311717
                        + kernels[16] * 0.0007649518
                        + kernels[18] * 0.006822801422
                        + kernels[22] * 0.000324531241
                        + kernels[55] * -0.006281037307
                        + kernels[62] * -0.001631247157
                        ;
                        decisions[8] = 1.150276542066
                        + kernels[19] * 0.00342052988
                        + kernels[20] * 0.004241193665
                        + kernels[67] * -0.000515045629
                        + kernels[69] * -0.005268054105
                        + kernels[71] * -0.001145839532
                        + kernels[75] * -0.00073278428
                        ;
                        decisions[9] = -0.453290476063
                        + kernels[34] * 0.004271032207
                        + kernels[39] * -0.004105214754
                        + kernels[45] * -0.000165817453
                        ;
                        decisions[10] = -0.654675702257
                        + kernels[28] * 0.002148778882
                        + kernels[33] * 0.001951945311
                        + kernels[54] * -0.000928787222
                        + kernels[56] * -0.003040520771
                        + kernels[65] * -0.0001314162
                        ;
                        decisions[11] = 0.659351424936
                        + kernels[25] * 0.000403479189
                        + kernels[27] * 0.000288362133
                        + kernels[36] * 0.00244321023
                        + kernels[66] * -7.7276967e-05
                        + kernels[67] * -0.000181923816
                        + kernels[70] * -0.002875850769
                        ;
                        decisions[12] = -0.121458226371
                        + kernels[46] * 0.007494680253
                        + kernels[57] * -0.003716496858
                        + kernels[59] * -0.003778183395
                        ;
                        decisions[13] = 1.359144100136
                        + kernels[43] * 0.000362315429
                        + kernels[44] * 0.002587901974
                        + kernels[48] * 0.001188301685
                        + kernels[50] * 0.000672818801
                        + kernels[68] * -0.002517475043
                        + kernels[74] * -0.002293862846
                        ;
                        decisions[14] = 1.238282207101
                        + kernels[52] * 0.000757057189
                        + kernels[60] * 0.002089473045
                        + kernels[63] * 0.000544414409
                        + kernels[64] * 0.001371896881
                        + kernels[72] * -0.001032998067
                        + kernels[73] * -0.003729843457
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }