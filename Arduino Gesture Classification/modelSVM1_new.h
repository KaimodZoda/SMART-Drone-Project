#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[82] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[1] = compute_kernel(x,   7.93  , -0.89  , 2.53  , 13.46  , 5.8  , -5.3  , 16.79  , 3.35  , -3.26  , 4.69  , 3.61  , 2.91 );
                        kernels[2] = compute_kernel(x,   7.55  , -1.37  , 2.29  , 13.32  , 6.17  , -5.28  , 16.83  , 4.36  , -2.5  , 4.74  , 2.63  , 2.83 );
                        kernels[3] = compute_kernel(x,   7.47  , -1.28  , 2.27  , 13.47  , 6.19  , -5.29  , 16.96  , 4.03  , -2.07  , 4.83  , 2.88  , 2.72 );
                        kernels[4] = compute_kernel(x,   7.79  , -1.11  , 2.49  , 13.16  , 5.87  , -5.2  , 16.62  , 3.51  , -3.2  , 5.24  , 3.4  , 3.33 );
                        kernels[5] = compute_kernel(x,   7.62  , -1.21  , 2.2  , 13.9  , 5.56  , -5.68  , 17.14  , 4.98  , -2.82  , 5.88  , 2.2  , 3.17 );
                        kernels[6] = compute_kernel(x,   8.28  , -0.8  , 2.13  , 14.89  , 5.13  , -5.17  , 17.32  , 4.26  , -1.72  , 6.17  , 3.54  , 4.11 );
                        kernels[7] = compute_kernel(x,   12.22  , -5.18  , -5.94  , 8.95  , 0.64  , -11.27  , 15.74  , 1.55  , -8.49  , 10.64  , -7.99  , -9.98 );
                        kernels[8] = compute_kernel(x,   12.24  , -5.37  , -5.76  , 9.04  , 0.71  , -11.2  , 15.91  , 2.11  , -8.17  , 10.64  , -8.31  , -9.99 );
                        kernels[9] = compute_kernel(x,   12.2  , -5.04  , -6.16  , 9.25  , 1.0  , -11.02  , 16.38  , 1.82  , -7.93  , 9.37  , -8.03  , -10.5 );
                        kernels[10] = compute_kernel(x,   12.91  , -4.36  , -7.24  , 12.33  , 4.01  , -6.75  , 17.44  , 4.77  , -3.47  , 14.18  , -5.11  , -7.51 );
                        kernels[11] = compute_kernel(x,   12.03  , -3.6  , -7.95  , 11.99  , 2.33  , -7.41  , 15.05  , 1.76  , -8.04  , 11.41  , -2.75  , -10.04 );
                        kernels[12] = compute_kernel(x,   11.61  , -4.83  , -7.3  , 10.54  , 4.7  , -7.21  , 16.94  , 4.84  , -5.32  , 13.1  , -5.89  , -7.81 );
                        kernels[13] = compute_kernel(x,   11.06  , -5.14  , -8.19  , 11.0  , 4.42  , -7.66  , 17.56  , 4.65  , -5.34  , 13.02  , -6.37  , -8.16 );
                        kernels[14] = compute_kernel(x,   12.19  , -3.09  , -7.91  , 10.85  , 3.46  , -7.08  , 16.07  , 3.28  , -5.86  , 11.66  , -6.04  , -7.98 );
                        kernels[15] = compute_kernel(x,   13.12  , -5.67  , -6.88  , 9.59  , 4.04  , -7.06  , 16.44  , 4.07  , -6.63  , 13.24  , -6.34  , -6.6 );
                        kernels[16] = compute_kernel(x,   14.8  , -4.88  , -6.23  , 11.02  , 3.47  , -7.41  , 16.55  , 3.43  , -5.91  , 17.73  , -3.26  , -5.85 );
                        kernels[17] = compute_kernel(x,   14.33  , -4.14  , -7.15  , 14.16  , 5.19  , -5.52  , 18.92  , 0.17  , -4.11  , 17.34  , -2.18  , -6.82 );
                        kernels[18] = compute_kernel(x,   7.16  , -6.6  , -2.62  , 4.22  , 2.15  , -9.2  , 5.12  , 7.19  , -5.22  , 6.36  , -6.84  , 1.14 );
                        kernels[19] = compute_kernel(x,   6.35  , -6.66  , -2.4  , 5.63  , 3.16  , -9.73  , 4.82  , 7.28  , -3.74  , 7.83  , -6.89  , 2.38 );
                        kernels[20] = compute_kernel(x,   6.13  , -6.37  , -2.49  , 5.95  , 3.43  , -9.96  , 4.94  , 7.03  , -3.59  , 7.18  , -6.94  , 2.33 );
                        kernels[21] = compute_kernel(x,   6.19  , -5.91  , -6.83  , 8.21  , 1.01  , -8.35  , 8.62  , 3.64  , -8.52  , 8.51  , -8.86  , -4.18 );
                        kernels[22] = compute_kernel(x,   6.07  , -5.75  , -6.92  , 7.54  , 1.36  , -8.74  , 6.46  , 4.23  , -9.69  , 8.6  , -8.92  , -4.12 );
                        kernels[23] = compute_kernel(x,   6.19  , -2.2  , -8.89  , 8.09  , 0.66  , -8.65  , 10.91  , 7.92  , -0.59  , 10.64  , -0.85  , -10.02 );
                        kernels[24] = compute_kernel(x,   6.86  , -2.28  , -8.88  , 8.42  , 1.33  , -8.47  , 10.46  , 7.69  , -1.6  , 11.2  , -1.18  , -10.01 );
                        kernels[25] = compute_kernel(x,   7.99  , -4.53  , -6.65  , 8.64  , -0.44  , -5.81  , 6.86  , 6.54  , -1.17  , 12.22  , -8.56  , -1.68 );
                        kernels[26] = compute_kernel(x,   7.92  , -5.77  , -6.34  , 12.9  , 4.02  , -7.32  , 10.67  , 7.03  , -1.69  , 11.08  , -9.42  , -2.43 );
                        kernels[27] = compute_kernel(x,   9.29  , -4.85  , -8.03  , 11.1  , 4.54  , -7.11  , 12.31  , 8.83  , 0.41  , 11.07  , -9.51  , 0.88 );
                        kernels[28] = compute_kernel(x,   9.61  , -4.67  , -8.11  , 10.85  , 2.54  , -7.66  , 12.27  , 8.67  , -0.67  , 10.52  , -9.39  , 0.2 );
                        kernels[29] = compute_kernel(x,   10.05  , -7.39  , -3.71  , 9.61  , 5.21  , -6.9  , 9.48  , 8.45  , 4.06  , 11.68  , -6.66  , 0.79 );
                        kernels[30] = compute_kernel(x,   9.93  , -7.6  , -3.42  , 9.79  , 5.46  , -6.78  , 9.64  , 8.67  , 4.09  , 11.68  , -6.66  , 0.79 );
                        kernels[31] = compute_kernel(x,   7.92  , -6.56  , -4.25  , 7.67  , 4.25  , -7.45  , 7.87  , 8.6  , 2.28  , 9.39  , -6.34  , 0.39 );
                        kernels[32] = compute_kernel(x,   10.34  , 4.41  , -6.36  , 8.72  , -5.3  , -5.38  , 7.75  , 2.31  , -8.62  , 8.1  , -0.92  , -10.19 );
                        kernels[33] = compute_kernel(x,   5.52  , -3.92  , -8.01  , 1.28  , -1.31  , -7.19  , 6.83  , -3.43  , -11.01  , 3.67  , -4.55  , -11.36 );
                        kernels[34] = compute_kernel(x,   4.54  , 0.31  , -8.5  , 4.14  , 3.96  , -7.24  , 10.62  , 2.58  , -9.05  , 4.52  , -1.12  , -8.85 );
                        kernels[35] = compute_kernel(x,   4.74  , 0.41  , -8.72  , 4.0  , 3.03  , -7.2  , 11.26  , 2.92  , -8.61  , 4.52  , -1.12  , -8.85 );
                        kernels[36] = compute_kernel(x,   4.89  , 0.48  , -8.67  , 4.16  , 1.48  , -6.94  , 11.89  , 3.1  , -8.46  , 4.72  , -1.33  , -9.09 );
                        kernels[37] = compute_kernel(x,   6.56  , 0.46  , -8.0  , 6.77  , -1.82  , -7.69  , 12.83  , -1.62  , -8.04  , 6.12  , -1.85  , -8.01 );
                        kernels[38] = compute_kernel(x,   10.98  , -1.59  , -8.94  , 10.73  , 1.84  , -9.11  , 11.93  , 0.23  , -8.72  , 6.92  , -2.17  , -9.69 );
                        kernels[39] = compute_kernel(x,   11.04  , -1.48  , -8.99  , 10.83  , 1.81  , -9.06  , 11.8  , 0.36  , -8.84  , 7.08  , -1.8  , -9.64 );
                        kernels[40] = compute_kernel(x,   9.92  , -3.22  , -8.98  , 9.6  , 2.45  , -8.1  , 7.7  , 1.14  , -10.09  , 6.79  , -3.71  , -8.66 );
                        kernels[41] = compute_kernel(x,   6.62  , -0.77  , -8.35  , 5.98  , -1.63  , -7.72  , 9.05  , -1.58  , -9.87  , 4.74  , -3.12  , -7.52 );
                        kernels[42] = compute_kernel(x,   6.35  , -1.6  , -9.31  , 6.14  , -2.03  , -8.11  , 10.92  , 0.88  , -10.26  , 4.9  , -5.54  , -8.71 );
                        kernels[43] = compute_kernel(x,   9.61  , -4.21  , -8.78  , 4.38  , -0.38  , -9.6  , 7.36  , -1.32  , -8.92  , 10.41  , -1.34  , -10.14 );
                        kernels[44] = compute_kernel(x,   10.04  , -5.23  , -7.5  , 7.7  , -1.05  , -8.25  , 9.39  , 5.03  , -9.3  , 8.07  , 0.72  , -9.7 );
                        kernels[45] = compute_kernel(x,   9.19  , -1.43  , -8.04  , 7.02  , -1.29  , -8.09  , 9.21  , 3.49  , -7.36  , 5.86  , 3.97  , -9.18 );
                        kernels[46] = compute_kernel(x,   11.8  , -6.86  , -5.97  , 7.02  , -1.33  , -8.33  , 12.37  , 2.02  , -7.58  , 6.97  , 3.33  , -7.98 );
                        kernels[47] = compute_kernel(x,   -0.16  , 0.94  , 0.31  , 7.64  , 3.15  , -8.83  , 12.36  , 5.61  , 5.13  , 1.53  , 5.19  , 2.75 );
                        kernels[48] = compute_kernel(x,   0.24  , 1.12  , 0.15  , 6.97  , 2.45  , -9.18  , 11.59  , 5.85  , 4.26  , 1.65  , 5.18  , 2.43 );
                        kernels[49] = compute_kernel(x,   0.37  , 1.22  , 2.68  , 8.78  , 3.25  , -5.79  , 8.94  , 3.75  , 10.63  , 3.17  , 0.24  , 6.41 );
                        kernels[50] = compute_kernel(x,   -0.13  , 3.3  , 1.16  , 3.69  , 4.66  , -5.08  , 5.52  , 0.38  , 4.48  , 0.96  , 5.59  , 2.06 );
                        kernels[51] = compute_kernel(x,   0.57  , 2.01  , 1.27  , 5.33  , 3.87  , -6.41  , 5.4  , 1.84  , 7.6  , 0.68  , 0.55  , -0.14 );
                        kernels[52] = compute_kernel(x,   -0.16  , 0.6  , 0.0  , 6.21  , 5.07  , -5.81  , 6.66  , 3.32  , 6.55  , 0.11  , 0.9  , -0.84 );
                        kernels[53] = compute_kernel(x,   0.34  , 1.78  , -0.15  , 9.1  , 5.04  , -6.68  , 10.4  , 3.1  , 5.19  , 0.58  , 2.45  , -1.39 );
                        kernels[54] = compute_kernel(x,   0.38  , 2.15  , -0.21  , 8.83  , 4.63  , -6.87  , 9.73  , 3.02  , 5.04  , 0.61  , 1.51  , -1.39 );
                        kernels[55] = compute_kernel(x,   0.96  , 0.69  , 0.89  , 8.76  , 7.63  , -3.01  , 9.63  , 1.52  , 9.51  , 0.81  , 3.27  , 1.62 );
                        kernels[56] = compute_kernel(x,   5.89  , -2.14  , -7.66  , 0.65  , -2.56  , -0.1  , 0.95  , -0.55  , 3.43  , 8.75  , -1.02  , 4.46 );
                        kernels[57] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[58] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[59] = compute_kernel(x,   7.57  , -2.49  , -5.55  , 1.02  , -1.56  , 1.44  , 2.86  , -2.46  , 6.15  , 13.07  , -1.6  , 10.71 );
                        kernels[60] = compute_kernel(x,   5.89  , -4.83  , 4.05  , 0.09  , -2.6  , 0.8  , 0.71  , -2.76  , 1.18  , 5.84  , 3.97  , 7.92 );
                        kernels[61] = compute_kernel(x,   9.82  , -4.69  , -6.88  , 0.81  , -0.84  , -0.36  , 0.75  , -1.09  , -0.43  , 9.38  , -4.95  , 5.92 );
                        kernels[62] = compute_kernel(x,   10.28  , -7.09  , -6.68  , 0.96  , -2.0  , -0.29  , 1.2  , -1.84  , -0.68  , 9.38  , -7.33  , 4.55 );
                        kernels[63] = compute_kernel(x,   6.11  , -6.41  , -4.21  , 0.88  , 0.82  , -2.83  , 0.42  , -0.46  , -2.95  , 7.7  , -4.64  , 7.25 );
                        kernels[64] = compute_kernel(x,   6.61  , -7.15  , -4.17  , 0.59  , 0.71  , -2.94  , 0.2  , -0.36  , -3.12  , 7.81  , -4.86  , 6.53 );
                        kernels[65] = compute_kernel(x,   6.53  , -6.69  , -3.95  , 0.51  , 0.47  , -2.87  , 0.17  , -0.06  , -2.97  , 7.86  , -4.65  , 6.66 );
                        kernels[66] = compute_kernel(x,   6.72  , -6.46  , -3.99  , 0.5  , 0.38  , -2.9  , 0.13  , 0.04  , -2.91  , 8.13  , -4.25  , 6.68 );
                        kernels[67] = compute_kernel(x,   10.32  , -6.48  , -3.0  , 0.34  , -0.34  , 0.78  , 1.33  , -0.12  , 3.73  , 13.69  , -3.35  , 7.59 );
                        kernels[68] = compute_kernel(x,   12.41  , -6.86  , -5.42  , 14.01  , 5.12  , -4.98  , 11.23  , 6.9  , 4.2  , 13.22  , -5.62  , 6.53 );
                        kernels[69] = compute_kernel(x,   12.62  , -5.86  , -5.82  , 13.96  , 5.07  , -4.83  , 10.99  , 7.03  , 3.9  , 12.95  , -5.38  , 6.6 );
                        kernels[70] = compute_kernel(x,   12.45  , -7.45  , -5.5  , 14.12  , 5.74  , -4.86  , 11.34  , 7.69  , 4.0  , 13.64  , -5.76  , 6.56 );
                        kernels[71] = compute_kernel(x,   12.74  , -6.01  , -5.8  , 14.09  , 5.21  , -5.06  , 10.55  , 7.39  , 4.15  , 13.53  , -6.48  , 6.54 );
                        kernels[72] = compute_kernel(x,   12.76  , -6.98  , -5.54  , 14.21  , 5.12  , -5.24  , 10.48  , 7.29  , 4.27  , 13.53  , -6.48  , 6.54 );
                        kernels[73] = compute_kernel(x,   14.72  , -2.98  , -8.83  , 16.4  , 0.69  , -6.63  , 16.26  , 5.07  , 4.15  , 19.63  , -1.34  , -2.8 );
                        kernels[74] = compute_kernel(x,   14.75  , -2.11  , -8.59  , 16.41  , 0.94  , -6.42  , 15.32  , 5.09  , 4.56  , 19.78  , 2.35  , -2.75 );
                        kernels[75] = compute_kernel(x,   14.46  , -2.26  , -7.72  , 16.64  , 0.7  , -6.34  , 15.04  , 5.25  , 4.82  , 18.71  , -1.61  , -3.02 );
                        kernels[76] = compute_kernel(x,   14.27  , -2.55  , -7.7  , 16.81  , 0.84  , -6.17  , 14.92  , 5.31  , 4.97  , 18.49  , -2.38  , -2.95 );
                        kernels[77] = compute_kernel(x,   13.96  , -3.74  , -3.67  , 14.3  , 1.98  , -4.07  , 11.13  , 4.51  , 2.8  , 14.6  , -4.64  , 4.84 );
                        kernels[78] = compute_kernel(x,   14.23  , -3.88  , -3.61  , 14.27  , 1.84  , -4.08  , 11.0  , 4.61  , 2.79  , 13.89  , -3.28  , 4.9 );
                        kernels[79] = compute_kernel(x,   12.88  , -8.5  , -2.86  , 16.12  , 6.57  , -4.44  , 11.47  , 4.65  , 3.74  , 17.09  , -1.76  , 3.28 );
                        kernels[80] = compute_kernel(x,   15.62  , -6.09  , 2.88  , 15.42  , 6.1  , -1.29  , 9.85  , -0.4  , 10.03  , 8.12  , -0.87  , 9.09 );
                        kernels[81] = compute_kernel(x,   15.76  , -6.22  , 2.11  , 15.07  , 6.17  , -1.75  , 9.77  , -0.11  , 9.47  , 9.17  , -0.72  , 8.72 );
                        decisions[0] = -2.861233800275
                        + kernels[2] * 0.001949326416
                        + kernels[5] * 0.002328772758
                        + kernels[8] * 0.00166499376
                        + kernels[12] * 0.008023428725
                        + kernels[13] * 0.003944916181
                        + kernels[14] * 0.007702580554
                        + kernels[21] * -0.003388748297
                        + kernels[24] * -0.009855985316
                        + kernels[26] * -0.010608893443
                        + kernels[28] * -0.001760391338
                        ;
                        decisions[1] = -4.782383176379
                        + kernels[0] * 0.017535705866
                        + kernels[1] * 0.006841886068
                        + kernels[9] * 0.01439905566
                        + kernels[11] * 0.01822383029
                        + kernels[38] * -0.046625013376
                        + kernels[46] * -0.010375464507
                        ;
                        decisions[2] = -1.519679670557
                        + kernels[3] * 0.009740792167
                        + kernels[47] * -0.00546526542
                        + kernels[53] * -0.004275526746
                        ;
                        decisions[3] = -0.843089841034
                        + kernels[4] * 0.002064247891
                        + kernels[7] * 0.000340728481
                        + kernels[15] * 0.00130755801
                        + kernels[56] * -0.000283804209
                        + kernels[61] * -0.000138269244
                        + kernels[62] * -1.2528203e-05
                        + kernels[63] * -0.001295903251
                        + kernels[66] * -0.001982029475
                        ;
                        decisions[4] = 1.05824969567
                        + kernels[6] * 0.004536951113
                        + kernels[10] * 0.002872676045
                        + kernels[16] * 0.005285837012
                        + kernels[17] * 0.003359732191
                        + kernels[73] * -0.008802297689
                        + kernels[78] * -0.005385118247
                        + kernels[79] * -0.001867780425
                        ;
                        decisions[5] = 0.537893262584
                        + kernels[21] * 0.002189961481
                        + kernels[22] * 0.016520514466
                        + kernels[24] * 0.016296418593
                        + kernels[35] * -0.002090588321
                        + kernels[36] * -0.003212005756
                        + kernels[40] * -0.013940061778
                        + kernels[42] * -0.003236236246
                        + kernels[44] * -0.012528002439
                        ;
                        decisions[6] = -0.67371702675
                        + kernels[20] * 0.002535631639
                        + kernels[23] * 0.00250286264
                        + kernels[31] * 0.001812803807
                        + kernels[48] * -0.001648803902
                        + kernels[52] * -0.001591478941
                        + kernels[54] * -0.003611015243
                        ;
                        decisions[7] = -0.869158331116
                        + kernels[18] * 0.008037147117
                        + kernels[19] * 0.002725041487
                        + kernels[25] * 0.000535486243
                        + kernels[64] * -0.007905972864
                        + kernels[65] * -0.003391701984
                        ;
                        decisions[8] = 3.38680718989
                        + kernels[27] * 0.008540405362
                        + kernels[29] * 0.014033500961
                        + kernels[30] * 0.006885339733
                        + kernels[68] * -0.004151317161
                        + kernels[70] * -0.000362169242
                        + kernels[71] * -0.005400417398
                        + kernels[72] * -0.016579412458
                        + kernels[76] * -0.002965929796
                        ;
                        decisions[9] = -0.515433957329
                        + kernels[34] * 0.001514075033
                        + kernels[35] * 0.002534584298
                        + kernels[37] * 0.000158621187
                        + kernels[45] * 0.001004954513
                        + kernels[54] * -0.005212235031
                        ;
                        decisions[10] = -0.645002172362
                        + kernels[33] * 0.00011119203
                        + kernels[41] * 0.003390829726
                        + kernels[43] * 0.001048952848
                        + kernels[46] * 0.000116438926
                        + kernels[57] * -0.001224519461
                        + kernels[62] * -0.001169600432
                        + kernels[64] * -0.002273293637
                        ;
                        decisions[11] = 0.791743525891
                        + kernels[32] * 0.000216534263
                        + kernels[39] * 0.002095594325
                        + kernels[46] * 0.002483591601
                        + kernels[73] * -0.000814858547
                        + kernels[74] * -0.001437196076
                        + kernels[75] * -0.000120123186
                        + kernels[78] * -0.002423542379
                        ;
                        decisions[12] = -0.158017782386
                        + kernels[49] * 0.000715043661
                        + kernels[50] * 0.005818332178
                        + kernels[51] * 0.001050160301
                        + kernels[58] * -0.004088656627
                        + kernels[60] * -0.003494879514
                        ;
                        decisions[13] = 1.274102079255
                        + kernels[49] * 0.004358831451
                        + kernels[55] * 0.000897928089
                        + kernels[69] * -0.001669998135
                        + kernels[80] * -0.003586761405
                        ;
                        decisions[14] = 1.115639525843
                        + kernels[59] * 8.7010246e-05
                        + kernels[61] * 0.000106190263
                        + kernels[67] * 0.005414809394
                        + kernels[77] * -0.002001199064
                        + kernels[78] * -0.002094212875
                        + kernels[81] * -0.001512597965
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }
