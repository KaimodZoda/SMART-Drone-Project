#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[67] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[1] = compute_kernel(x,   13.57  , -3.64  , -6.67  , 13.79  , 4.55  , -5.76  , 16.36  , 4.51  , -5.56  , 16.96  , -1.46  , -7.05 );
                        kernels[2] = compute_kernel(x,   11.86  , -6.53  , -6.35  , 11.88  , 7.11  , -4.85  , 14.84  , 7.87  , -6.24  , 17.55  , -4.45  , -6.83 );
                        kernels[3] = compute_kernel(x,   11.95  , -5.5  , -6.21  , 9.04  , 0.88  , -11.0  , 16.63  , 1.85  , -7.82  , 9.24  , -8.21  , -10.5 );
                        kernels[4] = compute_kernel(x,   12.28  , -5.61  , -5.78  , 9.47  , 1.67  , -10.74  , 16.38  , 2.69  , -7.03  , 9.86  , -8.23  , -10.01 );
                        kernels[5] = compute_kernel(x,   12.91  , -4.36  , -7.24  , 12.33  , 4.01  , -6.75  , 17.44  , 4.77  , -3.47  , 14.18  , -5.11  , -7.51 );
                        kernels[6] = compute_kernel(x,   11.91  , -2.7  , -8.66  , 12.23  , 2.16  , -7.6  , 17.03  , 1.59  , -6.21  , 11.43  , -3.34  , -9.4 );
                        kernels[7] = compute_kernel(x,   12.71  , -3.78  , -7.39  , 10.39  , 2.62  , -7.61  , 16.41  , 2.15  , -6.22  , 12.22  , -5.6  , -7.54 );
                        kernels[8] = compute_kernel(x,   12.95  , -3.15  , -6.68  , 11.6  , 3.62  , -6.36  , 16.98  , 3.33  , -4.64  , 11.78  , -5.6  , -7.15 );
                        kernels[9] = compute_kernel(x,   12.19  , -3.09  , -7.91  , 10.85  , 3.46  , -7.08  , 16.07  , 3.28  , -5.86  , 11.66  , -6.04  , -7.98 );
                        kernels[10] = compute_kernel(x,   13.12  , -5.67  , -6.88  , 9.59  , 4.04  , -7.06  , 16.44  , 4.07  , -6.63  , 13.24  , -6.34  , -6.6 );
                        kernels[11] = compute_kernel(x,   14.55  , -3.62  , -7.15  , 14.27  , 4.55  , -5.92  , 18.71  , 0.17  , -4.6  , 17.5  , -1.26  , -6.8 );
                        kernels[12] = compute_kernel(x,   9.91  , -3.4  , -9.49  , 9.28  , 2.38  , -8.01  , 9.28  , 8.76  , 3.18  , 10.3  , -9.26  , -0.2 );
                        kernels[13] = compute_kernel(x,   5.56  , -5.53  , -7.3  , 7.19  , 6.4  , -5.81  , 5.52  , 7.01  , 2.16  , 5.03  , -6.87  , -1.88 );
                        kernels[14] = compute_kernel(x,   6.01  , -4.85  , -7.64  , 6.56  , 5.77  , -5.76  , 5.22  , 6.53  , 1.66  , 5.61  , -6.86  , -2.28 );
                        kernels[15] = compute_kernel(x,   6.19  , -5.91  , -6.83  , 8.21  , 1.01  , -8.35  , 8.62  , 3.64  , -8.52  , 8.51  , -8.86  , -4.18 );
                        kernels[16] = compute_kernel(x,   6.07  , -5.75  , -6.92  , 7.54  , 1.36  , -8.74  , 6.46  , 4.23  , -9.69  , 8.6  , -8.92  , -4.12 );
                        kernels[17] = compute_kernel(x,   6.19  , -2.2  , -8.89  , 8.09  , 0.66  , -8.65  , 10.91  , 7.92  , -0.59  , 10.64  , -0.85  , -10.02 );
                        kernels[18] = compute_kernel(x,   6.86  , -2.28  , -8.88  , 8.42  , 1.33  , -8.47  , 10.46  , 7.69  , -1.6  , 11.2  , -1.18  , -10.01 );
                        kernels[19] = compute_kernel(x,   6.37  , -6.15  , -6.08  , 5.84  , -2.2  , -8.32  , 7.54  , 7.99  , -2.39  , 8.69  , -8.68  , -1.88 );
                        kernels[20] = compute_kernel(x,   7.41  , -4.26  , -7.18  , 9.4  , 0.9  , -6.86  , 7.38  , 8.09  , 0.38  , 11.57  , -6.96  , -0.11 );
                        kernels[21] = compute_kernel(x,   7.99  , -4.53  , -6.65  , 8.64  , -0.44  , -5.81  , 6.86  , 6.54  , -1.17  , 12.22  , -8.56  , -1.68 );
                        kernels[22] = compute_kernel(x,   7.92  , -5.77  , -6.34  , 12.9  , 4.02  , -7.32  , 10.67  , 7.03  , -1.69  , 11.08  , -9.42  , -2.43 );
                        kernels[23] = compute_kernel(x,   8.49  , -6.41  , -7.35  , 10.44  , 4.34  , -8.09  , 9.87  , 10.86  , 3.78  , 7.75  , -9.69  , 0.56 );
                        kernels[24] = compute_kernel(x,   9.19  , 0.29  , -10.92  , 7.87  , -2.55  , -8.69  , 20.0  , -4.45  , 0.81  , 14.21  , 1.61  , -9.49 );
                        kernels[25] = compute_kernel(x,   9.96  , 1.02  , -10.88  , 9.17  , -2.76  , -8.23  , 20.0  , -4.33  , 0.87  , 14.8  , 2.32  , -10.03 );
                        kernels[26] = compute_kernel(x,   11.01  , 1.64  , -10.62  , 10.3  , -2.86  , -8.01  , 18.44  , -0.62  , -1.05  , 12.17  , 2.43  , -10.93 );
                        kernels[27] = compute_kernel(x,   11.01  , 1.29  , -10.48  , 10.72  , -2.26  , -8.17  , 16.92  , -3.93  , 1.08  , 9.21  , 1.8  , -11.66 );
                        kernels[28] = compute_kernel(x,   9.54  , 0.15  , -10.82  , 7.74  , -2.58  , -8.92  , 20.0  , -5.54  , -2.86  , 13.9  , 1.08  , -8.66 );
                        kernels[29] = compute_kernel(x,   8.52  , -1.99  , -10.5  , 6.59  , -1.58  , -8.32  , 9.5  , 2.71  , -8.74  , 8.08  , -1.45  , -10.17 );
                        kernels[30] = compute_kernel(x,   5.52  , -3.92  , -8.01  , 1.28  , -1.31  , -7.19  , 6.83  , -3.43  , -11.01  , 3.67  , -4.55  , -11.36 );
                        kernels[31] = compute_kernel(x,   4.54  , 0.31  , -8.5  , 4.14  , 3.96  , -7.24  , 10.62  , 2.58  , -9.05  , 4.52  , -1.12  , -8.85 );
                        kernels[32] = compute_kernel(x,   4.89  , 0.48  , -8.67  , 4.16  , 1.48  , -6.94  , 11.89  , 3.1  , -8.46  , 4.72  , -1.33  , -9.09 );
                        kernels[33] = compute_kernel(x,   9.27  , -2.39  , -8.99  , 8.37  , 2.51  , -7.84  , 11.28  , 1.93  , -9.28  , 6.26  , -3.2  , -8.79 );
                        kernels[34] = compute_kernel(x,   11.04  , -1.48  , -8.99  , 10.83  , 1.81  , -9.06  , 11.8  , 0.36  , -8.84  , 7.08  , -1.8  , -9.64 );
                        kernels[35] = compute_kernel(x,   9.92  , -3.22  , -8.98  , 9.6  , 2.45  , -8.1  , 7.7  , 1.14  , -10.09  , 6.79  , -3.71  , -8.66 );
                        kernels[36] = compute_kernel(x,   10.58  , -3.42  , -8.91  , 10.0  , 2.82  , -8.15  , 7.93  , 1.04  , -10.01  , 6.92  , -3.78  , -9.02 );
                        kernels[37] = compute_kernel(x,   10.55  , -3.65  , -8.78  , 9.96  , 2.88  , -8.16  , 8.12  , 0.83  , -9.84  , 7.04  , -3.37  , -9.25 );
                        kernels[38] = compute_kernel(x,   6.62  , -0.77  , -8.35  , 5.98  , -1.63  , -7.72  , 9.05  , -1.58  , -9.87  , 4.74  , -3.12  , -7.52 );
                        kernels[39] = compute_kernel(x,   9.61  , -4.21  , -8.78  , 4.38  , -0.38  , -9.6  , 7.36  , -1.32  , -8.92  , 10.41  , -1.34  , -10.14 );
                        kernels[40] = compute_kernel(x,   0.57  , 0.94  , -0.01  , 10.15  , 3.09  , -7.06  , 11.95  , 4.21  , 9.86  , 1.8  , 2.19  , 2.05 );
                        kernels[41] = compute_kernel(x,   0.53  , 0.85  , -0.01  , 9.99  , 2.8  , -6.72  , 11.67  , 4.76  , 10.01  , 1.92  , 2.46  , 2.14 );
                        kernels[42] = compute_kernel(x,   0.7  , 1.02  , -0.33  , 9.64  , 4.52  , -6.28  , 10.97  , 4.96  , 9.21  , 1.85  , 2.76  , 1.81 );
                        kernels[43] = compute_kernel(x,   -0.13  , 3.3  , 1.16  , 3.69  , 4.66  , -5.08  , 5.52  , 0.38  , 4.48  , 0.96  , 5.59  , 2.06 );
                        kernels[44] = compute_kernel(x,   0.65  , 1.88  , 1.07  , 5.05  , 4.29  , -6.14  , 5.73  , 2.42  , 8.06  , 0.68  , 0.16  , 0.18 );
                        kernels[45] = compute_kernel(x,   0.73  , 1.98  , 1.13  , 5.24  , 3.99  , -6.23  , 5.5  , 2.12  , 7.81  , 0.68  , 0.55  , -0.14 );
                        kernels[46] = compute_kernel(x,   0.57  , 2.01  , 1.27  , 5.33  , 3.87  , -6.41  , 5.4  , 1.84  , 7.6  , 0.68  , 0.55  , -0.14 );
                        kernels[47] = compute_kernel(x,   -0.16  , 0.6  , 0.0  , 6.21  , 5.07  , -5.81  , 6.66  , 3.32  , 6.55  , 0.11  , 0.9  , -0.84 );
                        kernels[48] = compute_kernel(x,   0.38  , 2.15  , -0.21  , 8.83  , 4.63  , -6.87  , 9.73  , 3.02  , 5.04  , 0.61  , 1.51  , -1.39 );
                        kernels[49] = compute_kernel(x,   3.53  , -3.37  , -7.09  , 0.51  , -3.03  , 0.22  , 0.73  , 0.26  , 2.85  , 5.41  , -4.51  , 3.72 );
                        kernels[50] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[51] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[52] = compute_kernel(x,   5.89  , -4.83  , 4.05  , 0.09  , -2.6  , 0.8  , 0.71  , -2.76  , 1.18  , 5.84  , 3.97  , 7.92 );
                        kernels[53] = compute_kernel(x,   9.82  , -4.69  , -6.88  , 0.81  , -0.84  , -0.36  , 0.75  , -1.09  , -0.43  , 9.38  , -4.95  , 5.92 );
                        kernels[54] = compute_kernel(x,   10.28  , -7.09  , -6.68  , 0.96  , -2.0  , -0.29  , 1.2  , -1.84  , -0.68  , 9.38  , -7.33  , 4.55 );
                        kernels[55] = compute_kernel(x,   6.61  , -7.15  , -4.17  , 0.59  , 0.71  , -2.94  , 0.2  , -0.36  , -3.12  , 7.81  , -4.86  , 6.53 );
                        kernels[56] = compute_kernel(x,   10.32  , -6.48  , -3.0  , 0.34  , -0.34  , 0.78  , 1.33  , -0.12  , 3.73  , 13.69  , -3.35  , 7.59 );
                        kernels[57] = compute_kernel(x,   16.21  , -4.17  , -2.52  , 16.98  , 4.12  , -1.89  , 11.32  , 3.18  , 9.98  , 9.07  , 0.77  , 6.65 );
                        kernels[58] = compute_kernel(x,   17.28  , -4.61  , -1.97  , 17.06  , 4.34  , -1.26  , 9.87  , -1.49  , 11.42  , 11.02  , -0.57  , 8.46 );
                        kernels[59] = compute_kernel(x,   12.62  , -5.86  , -5.82  , 13.96  , 5.07  , -4.83  , 10.99  , 7.03  , 3.9  , 12.95  , -5.38  , 6.6 );
                        kernels[60] = compute_kernel(x,   12.74  , -6.01  , -5.8  , 14.09  , 5.21  , -5.06  , 10.55  , 7.39  , 4.15  , 13.53  , -6.48  , 6.54 );
                        kernels[61] = compute_kernel(x,   14.72  , -2.98  , -8.83  , 16.4  , 0.69  , -6.63  , 16.26  , 5.07  , 4.15  , 19.63  , -1.34  , -2.8 );
                        kernels[62] = compute_kernel(x,   14.75  , -2.11  , -8.59  , 16.41  , 0.94  , -6.42  , 15.32  , 5.09  , 4.56  , 19.78  , 2.35  , -2.75 );
                        kernels[63] = compute_kernel(x,   14.78  , -1.75  , -8.32  , 16.56  , 0.85  , -6.41  , 15.26  , 5.26  , 4.71  , 19.03  , -0.24  , -2.88 );
                        kernels[64] = compute_kernel(x,   14.27  , -2.55  , -7.7  , 16.81  , 0.84  , -6.17  , 14.92  , 5.31  , 4.97  , 18.49  , -2.38  , -2.95 );
                        kernels[65] = compute_kernel(x,   14.23  , -3.88  , -3.61  , 14.27  , 1.84  , -4.08  , 11.0  , 4.61  , 2.79  , 13.89  , -3.28  , 4.9 );
                        kernels[66] = compute_kernel(x,   12.88  , -8.5  , -2.86  , 16.12  , 6.57  , -4.44  , 11.47  , 4.65  , 3.74  , 17.09  , -1.76  , 3.28 );
                        decisions[0] = -3.816617477131
                        + kernels[2] * 0.005356183447
                        + kernels[4] * 0.002471729856
                        + kernels[9] * 0.015555829657
                        + kernels[15] * -0.003836292026
                        + kernels[18] * -0.009603722649
                        + kernels[22] * -0.009943728284
                        ;
                        decisions[1] = -8.306119615939
                        + kernels[0] * 0.034169904863
                        + kernels[3] * 0.006838268159
                        + kernels[6] * 0.034018109426
                        + kernels[25] * -0.007610206862
                        + kernels[28] * -0.017909059055
                        + kernels[34] * -0.041796502611
                        + kernels[37] * -0.00771051392
                        ;
                        decisions[2] = -1.127735389243
                        + kernels[8] * 0.003379699863
                        + kernels[48] * -0.003379699863
                        ;
                        decisions[3] = -1.011535832793
                        + kernels[7] * 0.000816444849
                        + kernels[10] * 0.00246848451
                        + kernels[54] * -0.003217840456
                        + kernels[55] * -6.7088903e-05
                        ;
                        decisions[4] = 0.789991745957
                        + kernels[1] * 0.004491519163
                        + kernels[5] * 0.004237220011
                        + kernels[11] * 0.00584183604
                        + kernels[61] * -0.012773864997
                        + kernels[66] * -0.001796710217
                        ;
                        decisions[5] = 0.642882399001
                        + kernels[15] * 0.012938867952
                        + kernels[16] * 0.004361499978
                        + kernels[18] * 0.015814904858
                        + kernels[24] * -0.001840212219
                        + kernels[29] * -0.008854106806
                        + kernels[32] * -0.00421558122
                        + kernels[33] * -0.003919999582
                        + kernels[35] * -0.014285372961
                        ;
                        decisions[6] = -0.836125591701
                        + kernels[13] * 0.007649839227
                        + kernels[17] * 0.000497619829
                        + kernels[47] * -0.008056703408
                        + kernels[48] * -9.0755648e-05
                        ;
                        decisions[7] = -0.947711639745
                        + kernels[14] * 0.005098594547
                        + kernels[19] * 0.002154360071
                        + kernels[21] * 0.00173107411
                        + kernels[49] * -0.003696803837
                        + kernels[54] * -0.001489159725
                        + kernels[55] * -0.003798065165
                        ;
                        decisions[8] = 2.154436893206
                        + kernels[12] * 0.009333355574
                        + kernels[20] * 0.000822202612
                        + kernels[22] * 0.005765165774
                        + kernels[23] * 0.001030179355
                        + kernels[60] * -0.013250892414
                        + kernels[64] * -0.003700010902
                        ;
                        decisions[9] = -0.664769381773
                        + kernels[27] * 0.001351035666
                        + kernels[31] * 0.004086615651
                        + kernels[48] * -0.005437651318
                        ;
                        decisions[10] = -0.644935784325
                        + kernels[30] * 3.8110706e-05
                        + kernels[38] * 0.003460070443
                        + kernels[39] * 0.001167264059
                        + kernels[50] * -0.00120823674
                        + kernels[54] * -0.001213767919
                        + kernels[55] * -0.002243440548
                        ;
                        decisions[11] = 1.044920434904
                        + kernels[25] * 0.001432574222
                        + kernels[26] * 0.005019091353
                        + kernels[36] * 0.000687674393
                        + kernels[61] * -0.00081518825
                        + kernels[62] * -0.001843826942
                        + kernels[63] * -0.004480324776
                        ;
                        decisions[12] = -0.120390002274
                        + kernels[43] * 0.005666120734
                        + kernels[44] * 0.001093859602
                        + kernels[45] * 0.000408679016
                        + kernels[46] * 0.000394204325
                        + kernels[51] * -0.004233190594
                        + kernels[52] * -0.003329673083
                        ;
                        decisions[13] = 1.217663595198
                        + kernels[40] * 2.8437087e-05
                        + kernels[41] * 0.001231924672
                        + kernels[42] * 0.003568493864
                        + kernels[57] * -0.003365606903
                        + kernels[59] * -0.00146324872
                        ;
                        decisions[14] = 1.188002952163
                        + kernels[53] * 0.000933900809
                        + kernels[56] * 0.004538868329
                        + kernels[58] * -0.00036157337
                        + kernels[65] * -0.005111195768
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }