#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[69] = { 0 };
                        float decisions[15] = { 0 };
                        int votes[6] = { 0 };
                        kernels[0] = compute_kernel(x,   12.91  , -4.36  , -7.24  , 12.33  , 4.01  , -6.75  , 17.44  , 4.77  , -3.47  , 14.18  , -5.11  , -7.51 );
                        kernels[1] = compute_kernel(x,   11.91  , -2.7  , -8.66  , 12.23  , 2.16  , -7.6  , 17.03  , 1.59  , -6.21  , 11.43  , -3.34  , -9.4 );
                        kernels[2] = compute_kernel(x,   12.71  , -3.78  , -7.39  , 10.39  , 2.62  , -7.61  , 16.41  , 2.15  , -6.22  , 12.22  , -5.6  , -7.54 );
                        kernels[3] = compute_kernel(x,   12.95  , -3.15  , -6.68  , 11.6  , 3.62  , -6.36  , 16.98  , 3.33  , -4.64  , 11.78  , -5.6  , -7.15 );
                        kernels[4] = compute_kernel(x,   13.12  , -5.67  , -6.88  , 9.59  , 4.04  , -7.06  , 16.44  , 4.07  , -6.63  , 13.24  , -6.34  , -6.6 );
                        kernels[5] = compute_kernel(x,   14.55  , -3.62  , -7.15  , 14.27  , 4.55  , -5.92  , 18.71  , 0.17  , -4.6  , 17.5  , -1.26  , -6.8 );
                        kernels[6] = compute_kernel(x,   12.83  , -2.72  , -9.63  , 11.87  , 0.87  , -9.58  , 14.23  , -3.83  , -9.43  , 14.08  , 1.02  , -10.66 );
                        kernels[7] = compute_kernel(x,   11.95  , -5.5  , -6.21  , 9.04  , 0.88  , -11.0  , 16.63  , 1.85  , -7.82  , 9.24  , -8.21  , -10.5 );
                        kernels[8] = compute_kernel(x,   9.37  , 9.33  , 1.4  , 9.07  , -8.98  , 2.26  , 9.95  , 1.54  , 9.12  , 11.39  , 0.8  , 9.38 );
                        kernels[9] = compute_kernel(x,   9.89  , 9.43  , 1.31  , 9.57  , -9.08  , 2.44  , 10.45  , 2.89  , 9.08  , 11.59  , 0.77  , 9.31 );
                        kernels[10] = compute_kernel(x,   9.07  , 9.62  , 1.87  , 9.31  , -9.11  , 2.35  , 10.26  , 2.85  , 9.72  , 10.74  , 0.54  , 9.34 );
                        kernels[11] = compute_kernel(x,   9.28  , 9.28  , 1.74  , 9.72  , -9.17  , 2.22  , 10.48  , 2.49  , 8.55  , 11.19  , 0.43  , 9.17 );
                        kernels[12] = compute_kernel(x,   8.71  , 9.51  , 1.38  , 9.06  , -8.98  , 2.6  , 10.29  , 2.5  , 9.15  , 11.04  , 1.28  , 9.41 );
                        kernels[13] = compute_kernel(x,   9.33  , 9.31  , 1.26  , 9.2  , -8.83  , 2.42  , 10.37  , 2.41  , 8.83  , 11.26  , 1.1  , 9.08 );
                        kernels[14] = compute_kernel(x,   9.91  , -8.32  , -0.13  , 8.29  , 9.04  , -1.08  , 11.55  , 0.09  , 9.25  , 11.83  , -2.95  , 5.24 );
                        kernels[15] = compute_kernel(x,   9.88  , -8.11  , -0.32  , 8.5  , 8.87  , -1.02  , 11.49  , -0.08  , 9.1  , 12.27  , -2.16  , 6.2 );
                        kernels[16] = compute_kernel(x,   3.95  , -7.97  , 0.08  , 5.79  , 7.8  , 0.86  , 6.43  , -1.68  , 8.32  , 6.88  , 0.12  , 7.5 );
                        kernels[17] = compute_kernel(x,   3.87  , -8.08  , 0.42  , 6.18  , 7.98  , 0.85  , 6.63  , -1.91  , 8.37  , 6.63  , 0.3  , 7.58 );
                        kernels[18] = compute_kernel(x,   3.99  , -7.98  , -0.25  , 5.58  , 7.71  , -0.08  , 6.57  , 4.3  , 4.92  , 6.52  , -5.88  , 2.6 );
                        kernels[19] = compute_kernel(x,   3.96  , -7.83  , -0.19  , 5.65  , 7.7  , 0.0  , 6.28  , 4.65  , 4.94  , 6.68  , -5.6  , 2.66 );
                        kernels[20] = compute_kernel(x,   3.68  , -7.72  , -0.15  , 5.68  , 7.73  , -0.07  , 6.25  , 4.71  , 5.85  , 6.08  , -5.87  , 2.62 );
                        kernels[21] = compute_kernel(x,   3.91  , -8.06  , 0.27  , 5.51  , 7.67  , -0.38  , 7.44  , 6.08  , 4.64  , 5.79  , -6.3  , 2.75 );
                        kernels[22] = compute_kernel(x,   3.75  , -7.86  , 0.34  , 5.44  , 7.67  , -0.46  , 7.31  , 5.81  , 4.81  , 5.67  , -6.21  , 2.76 );
                        kernels[23] = compute_kernel(x,   3.91  , -8.03  , 0.26  , 5.51  , 7.7  , -0.47  , 7.18  , 6.25  , 4.56  , 5.82  , -6.12  , 2.71 );
                        kernels[24] = compute_kernel(x,   4.4  , 0.13  , -8.1  , 4.32  , 3.7  , -6.89  , 10.77  , 1.99  , -9.5  , 4.98  , -1.66  , -8.81 );
                        kernels[25] = compute_kernel(x,   4.54  , 0.31  , -8.5  , 4.14  , 3.96  , -7.24  , 10.62  , 2.58  , -9.05  , 4.52  , -1.12  , -8.85 );
                        kernels[26] = compute_kernel(x,   11.04  , -1.48  , -8.99  , 10.83  , 1.81  , -9.06  , 11.8  , 0.36  , -8.84  , 7.08  , -1.8  , -9.64 );
                        kernels[27] = compute_kernel(x,   9.58  , -3.4  , -8.58  , 9.34  , 3.2  , -7.78  , 7.52  , 0.55  , -9.54  , 6.43  , -2.72  , -8.73 );
                        kernels[28] = compute_kernel(x,   10.58  , -3.42  , -8.91  , 10.0  , 2.82  , -8.15  , 7.93  , 1.04  , -10.01  , 6.92  , -3.78  , -9.02 );
                        kernels[29] = compute_kernel(x,   10.55  , -3.65  , -8.78  , 9.96  , 2.88  , -8.16  , 8.12  , 0.83  , -9.84  , 7.04  , -3.37  , -9.25 );
                        kernels[30] = compute_kernel(x,   6.62  , -0.77  , -8.35  , 5.98  , -1.63  , -7.72  , 9.05  , -1.58  , -9.87  , 4.74  , -3.12  , -7.52 );
                        kernels[31] = compute_kernel(x,   9.61  , -4.21  , -8.78  , 4.38  , -0.38  , -9.6  , 7.36  , -1.32  , -8.92  , 10.41  , -1.34  , -10.14 );
                        kernels[32] = compute_kernel(x,   9.19  , 0.29  , -10.92  , 7.87  , -2.55  , -8.69  , 20.0  , -4.45  , 0.81  , 14.21  , 1.61  , -9.49 );
                        kernels[33] = compute_kernel(x,   9.96  , 1.02  , -10.88  , 9.17  , -2.76  , -8.23  , 20.0  , -4.33  , 0.87  , 14.8  , 2.32  , -10.03 );
                        kernels[34] = compute_kernel(x,   11.01  , 1.64  , -10.62  , 10.3  , -2.86  , -8.01  , 18.44  , -0.62  , -1.05  , 12.17  , 2.43  , -10.93 );
                        kernels[35] = compute_kernel(x,   11.01  , 1.29  , -10.48  , 10.72  , -2.26  , -8.17  , 16.92  , -3.93  , 1.08  , 9.21  , 1.8  , -11.66 );
                        kernels[36] = compute_kernel(x,   9.54  , 0.15  , -10.82  , 7.74  , -2.58  , -8.92  , 20.0  , -5.54  , -2.86  , 13.9  , 1.08  , -8.66 );
                        kernels[37] = compute_kernel(x,   5.52  , -3.92  , -8.01  , 1.28  , -1.31  , -7.19  , 6.83  , -3.43  , -11.01  , 3.67  , -4.55  , -11.36 );
                        kernels[38] = compute_kernel(x,   0.65  , 1.88  , 1.07  , 5.05  , 4.29  , -6.14  , 5.73  , 2.42  , 8.06  , 0.68  , 0.16  , 0.18 );
                        kernels[39] = compute_kernel(x,   0.73  , 1.98  , 1.13  , 5.24  , 3.99  , -6.23  , 5.5  , 2.12  , 7.81  , 0.68  , 0.55  , -0.14 );
                        kernels[40] = compute_kernel(x,   0.57  , 2.01  , 1.27  , 5.33  , 3.87  , -6.41  , 5.4  , 1.84  , 7.6  , 0.68  , 0.55  , -0.14 );
                        kernels[41] = compute_kernel(x,   0.38  , 2.15  , -0.21  , 8.83  , 4.63  , -6.87  , 9.73  , 3.02  , 5.04  , 0.61  , 1.51  , -1.39 );
                        kernels[42] = compute_kernel(x,   0.34  , 0.3  , 0.55  , 6.94  , 6.8  , -2.86  , 8.34  , 2.42  , 9.42  , 0.22  , 1.82  , 0.68 );
                        kernels[43] = compute_kernel(x,   0.04  , 1.05  , 0.15  , 7.23  , 5.47  , -7.64  , 10.14  , 4.19  , 6.3  , 2.45  , 5.85  , 3.34 );
                        kernels[44] = compute_kernel(x,   0.24  , -0.02  , 0.23  , 6.41  , 3.04  , -8.56  , 11.17  , 4.48  , 6.34  , 1.59  , 4.19  , 2.88 );
                        kernels[45] = compute_kernel(x,   0.62  , 4.37  , 0.74  , 9.59  , 7.6  , -3.06  , 7.68  , -0.57  , 10.88  , 0.74  , 1.22  , 2.11 );
                        kernels[46] = compute_kernel(x,   -0.13  , 3.3  , 1.16  , 3.69  , 4.66  , -5.08  , 5.52  , 0.38  , 4.48  , 0.96  , 5.59  , 2.06 );
                        kernels[47] = compute_kernel(x,   9.82  , -4.69  , -6.88  , 0.81  , -0.84  , -0.36  , 0.75  , -1.09  , -0.43  , 9.38  , -4.95  , 5.92 );
                        kernels[48] = compute_kernel(x,   10.28  , -7.09  , -6.68  , 0.96  , -2.0  , -0.29  , 1.2  , -1.84  , -0.68  , 9.38  , -7.33  , 4.55 );
                        kernels[49] = compute_kernel(x,   6.61  , -7.15  , -4.17  , 0.59  , 0.71  , -2.94  , 0.2  , -0.36  , -3.12  , 7.81  , -4.86  , 6.53 );
                        kernels[50] = compute_kernel(x,   10.32  , -6.48  , -3.0  , 0.34  , -0.34  , 0.78  , 1.33  , -0.12  , 3.73  , 13.69  , -3.35  , 7.59 );
                        kernels[51] = compute_kernel(x,   8.68  , -5.93  , -3.16  , 0.23  , -0.96  , 0.96  , 1.15  , -0.37  , 4.3  , 10.75  , -4.7  , 5.9 );
                        kernels[52] = compute_kernel(x,   7.73  , -5.32  , -8.53  , 0.29  , -1.88  , -0.55  , 3.12  , -2.51  , 6.0  , 9.96  , 0.77  , 7.92 );
                        kernels[53] = compute_kernel(x,   3.79  , -4.19  , -7.41  , 0.38  , -3.34  , 0.29  , 0.76  , -0.5  , 3.4  , 5.31  , -2.94  , 3.13 );
                        kernels[54] = compute_kernel(x,   3.09  , -2.12  , -6.59  , 0.25  , -2.43  , 0.0  , 1.03  , -1.5  , 3.95  , 6.51  , -2.77  , 4.26 );
                        kernels[55] = compute_kernel(x,   5.89  , -4.83  , 4.05  , 0.09  , -2.6  , 0.8  , 0.71  , -2.76  , 1.18  , 5.84  , 3.97  , 7.92 );
                        kernels[56] = compute_kernel(x,   6.0  , -5.41  , 3.88  , 0.16  , -2.42  , 0.87  , 0.63  , -1.78  , 0.99  , 5.89  , 2.89  , 8.33 );
                        kernels[57] = compute_kernel(x,   12.42  , -6.86  , -5.43  , 14.02  , 5.22  , -4.84  , 11.27  , 6.96  , 4.25  , 13.29  , -5.78  , 6.66 );
                        kernels[58] = compute_kernel(x,   12.62  , -5.86  , -5.82  , 13.96  , 5.07  , -4.83  , 10.99  , 7.03  , 3.9  , 12.95  , -5.38  , 6.6 );
                        kernels[59] = compute_kernel(x,   14.72  , -2.98  , -8.83  , 16.4  , 0.69  , -6.63  , 16.26  , 5.07  , 4.15  , 19.63  , -1.34  , -2.8 );
                        kernels[60] = compute_kernel(x,   14.75  , -2.11  , -8.59  , 16.41  , 0.94  , -6.42  , 15.32  , 5.09  , 4.56  , 19.78  , 2.35  , -2.75 );
                        kernels[61] = compute_kernel(x,   14.78  , -1.75  , -8.32  , 16.56  , 0.85  , -6.41  , 15.26  , 5.26  , 4.71  , 19.03  , -0.24  , -2.88 );
                        kernels[62] = compute_kernel(x,   13.96  , -3.74  , -3.67  , 14.3  , 1.98  , -4.07  , 11.13  , 4.51  , 2.8  , 14.6  , -4.64  , 4.84 );
                        kernels[63] = compute_kernel(x,   14.23  , -3.88  , -3.61  , 14.27  , 1.84  , -4.08  , 11.0  , 4.61  , 2.79  , 13.89  , -3.28  , 4.9 );
                        kernels[64] = compute_kernel(x,   12.88  , -8.5  , -2.86  , 16.12  , 6.57  , -4.44  , 11.47  , 4.65  , 3.74  , 17.09  , -1.76  , 3.28 );
                        kernels[65] = compute_kernel(x,   17.32  , -4.52  , -1.77  , 17.29  , 4.31  , -0.95  , 10.2  , -2.26  , 11.34  , 11.2  , 0.19  , 8.39 );
                        kernels[66] = compute_kernel(x,   17.36  , -4.27  , -1.65  , 17.34  , 4.2  , -0.91  , 10.12  , -2.29  , 11.22  , 11.2  , 0.19  , 8.39 );
                        kernels[67] = compute_kernel(x,   17.28  , -4.61  , -1.97  , 17.06  , 4.34  , -1.26  , 9.87  , -1.49  , 11.42  , 11.02  , -0.57  , 8.46 );
                        kernels[68] = compute_kernel(x,   17.86  , -1.84  , 0.05  , 16.33  , 1.92  , -7.56  , 9.17  , 2.69  , 4.86  , 13.56  , 2.16  , 7.83 );
                        decisions[0] = -1.012162299965
                        + kernels[3] * 0.004060822243
                        + kernels[11] * -0.000596423335
                        + kernels[14] * -0.001816886145
                        + kernels[21] * -0.001616197888
                        + kernels[23] * -3.1314874e-05
                        ;
                        decisions[1] = -8.305501555758
                        + kernels[1] * 0.034030406792
                        + kernels[6] * 0.034168618968
                        + kernels[7] * 0.006838237628
                        + kernels[26] * -0.041856386284
                        + kernels[29] * -0.00767044234
                        + kernels[33] * -0.007619736391
                        + kernels[36] * -0.017890698374
                        ;
                        decisions[2] = -1.127735392585
                        + kernels[3] * 0.003379699873
                        + kernels[41] * -0.003379699873
                        ;
                        decisions[3] = -1.012106490125
                        + kernels[2] * 0.000803564833
                        + kernels[4] * 0.002481358485
                        + kernels[48] * -0.003214499103
                        + kernels[49] * -7.0424214e-05
                        ;
                        decisions[4] = 0.758043219954
                        + kernels[0] * 0.006243705485
                        + kernels[5] * 0.008189009124
                        + kernels[59] * -0.012872516301
                        + kernels[62] * -0.000124702355
                        + kernels[64] * -0.001435495953
                        ;
                        decisions[5] = 0.451536942456
                        + kernels[13] * 0.000590700331
                        + kernels[18] * 0.003107876902
                        + kernels[24] * -0.001801646108
                        + kernels[27] * -0.001348143976
                        + kernels[32] * -0.000548787149
                        ;
                        decisions[6] = -0.274836541263
                        + kernels[10] * 0.00229490414
                        + kernels[12] * 6.77587e-05
                        + kernels[17] * 0.003915675576
                        + kernels[20] * 0.006051765494
                        + kernels[22] * 0.000396479101
                        + kernels[38] * -0.00094206281
                        + kernels[42] * -0.0117845202
                        ;
                        decisions[7] = -0.658131777578
                        + kernels[8] * 0.003993260599
                        + kernels[16] * 0.005269576113
                        + kernels[18] * 0.001262470277
                        + kernels[19] * 0.004004994267
                        + kernels[51] * -0.007478381107
                        + kernels[52] * -0.000953403392
                        + kernels[54] * -0.002138626347
                        + kernels[56] * -0.00395989041
                        ;
                        decisions[8] = 3.042480668074
                        + kernels[9] * 0.004047628119
                        + kernels[15] * 0.015829079848
                        + kernels[57] * -0.007070243014
                        + kernels[62] * -0.00245634955
                        + kernels[65] * -0.010350115403
                        ;
                        decisions[9] = -0.664165793245
                        + kernels[25] * 0.004088923796
                        + kernels[35] * 0.00134833198
                        + kernels[41] * -0.005437255776
                        ;
                        decisions[10] = -0.646301337072
                        + kernels[30] * 0.003460095045
                        + kernels[31] * 0.001172038436
                        + kernels[37] * 3.5133419e-05
                        + kernels[48] * -0.001202628607
                        + kernels[49] * -0.002253565484
                        + kernels[53] * -0.001211072808
                        ;
                        decisions[11] = 1.041932439246
                        + kernels[28] * 0.000685736146
                        + kernels[33] * 0.001419314468
                        + kernels[34] * 0.005032181883
                        + kernels[59] * -0.000726732867
                        + kernels[60] * -0.001837387975
                        + kernels[61] * -0.004573111654
                        ;
                        decisions[12] = -0.12094798014
                        + kernels[38] * 0.001223581189
                        + kernels[39] * 0.000109175157
                        + kernels[40] * 0.000594089213
                        + kernels[46] * 0.005636501441
                        + kernels[54] * -0.004242251758
                        + kernels[55] * -0.003321095241
                        ;
                        decisions[13] = 1.09632457328
                        + kernels[41] * 0.000702496773
                        + kernels[43] * 0.00011355486
                        + kernels[44] * 0.002478812164
                        + kernels[45] * 0.000587047914
                        + kernels[58] * -0.001667121544
                        + kernels[63] * -0.001165523688
                        + kernels[66] * -0.000288888248
                        + kernels[68] * -0.000760378231
                        ;
                        decisions[14] = 1.188058221535
                        + kernels[47] * 0.000940391388
                        + kernels[50] * 0.00453297451
                        + kernels[63] * -0.005119889926
                        + kernels[67] * -0.000353475972
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 0 : 3] += 1;
                        votes[decisions[3] > 0 ? 0 : 4] += 1;
                        votes[decisions[4] > 0 ? 0 : 5] += 1;
                        votes[decisions[5] > 0 ? 1 : 2] += 1;
                        votes[decisions[6] > 0 ? 1 : 3] += 1;
                        votes[decisions[7] > 0 ? 1 : 4] += 1;
                        votes[decisions[8] > 0 ? 1 : 5] += 1;
                        votes[decisions[9] > 0 ? 2 : 3] += 1;
                        votes[decisions[10] > 0 ? 2 : 4] += 1;
                        votes[decisions[11] > 0 ? 2 : 5] += 1;
                        votes[decisions[12] > 0 ? 3 : 4] += 1;
                        votes[decisions[13] > 0 ? 3 : 5] += 1;
                        votes[decisions[14] > 0 ? 4 : 5] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 6; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "Backward";
                            case 1:
                            return "Down";
                            case 2:
                            return "Forward";
                            case 3:
                            return "Left";
                            case 4:
                            return "Right";
                            case 5:
                            return "Up";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 12);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 12; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }